// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/Policy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Proto/Policy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Conf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Conf_reflection_ = NULL;
const ::google::protobuf::Descriptor* TriggerConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TriggerConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* TriggerConfs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TriggerConfs_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilterConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilterConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilterConfs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilterConfs_reflection_ = NULL;
const ::google::protobuf::Descriptor* RerankConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RerankConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* RerankConfs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RerankConfs_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfileConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfileConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* RerankServiceConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RerankServiceConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReloadScript_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReloadScript_reflection_ = NULL;
const ::google::protobuf::Descriptor* Range_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Range_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* InterestImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InterestImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrentPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrentPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExposureScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExposureScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* TriggerConfExt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TriggerConfExt_reflection_ = NULL;
const ::google::protobuf::Descriptor* PolicyConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PolicyConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PolicyConfs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PolicyConfs_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhiteListConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhiteListConf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Proto_2fPolicy_2eproto() {
  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Proto/Policy.proto");
  GOOGLE_CHECK(file != NULL);
  Conf_descriptor_ = file->message_type(0);
  static const int Conf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conf, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conf, value_),
  };
  Conf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Conf_descriptor_,
      Conf::default_instance_,
      Conf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Conf));
  TriggerConf_descriptor_ = file->message_type(1);
  static const int TriggerConf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerConf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerConf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerConf, host_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerConf, api_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerConf, conf_),
  };
  TriggerConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TriggerConf_descriptor_,
      TriggerConf::default_instance_,
      TriggerConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TriggerConf));
  TriggerConfs_descriptor_ = file->message_type(2);
  static const int TriggerConfs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerConfs, triggers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerConfs, flag_),
  };
  TriggerConfs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TriggerConfs_descriptor_,
      TriggerConfs::default_instance_,
      TriggerConfs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerConfs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerConfs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TriggerConfs));
  FilterConf_descriptor_ = file->message_type(3);
  static const int FilterConf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConf, file_name_),
  };
  FilterConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilterConf_descriptor_,
      FilterConf::default_instance_,
      FilterConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilterConf));
  FilterConfs_descriptor_ = file->message_type(4);
  static const int FilterConfs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConfs, filters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConfs, flag_),
  };
  FilterConfs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilterConfs_descriptor_,
      FilterConfs::default_instance_,
      FilterConfs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConfs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterConfs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilterConfs));
  RerankConf_descriptor_ = file->message_type(5);
  static const int RerankConf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RerankConf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RerankConf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RerankConf, file_name_),
  };
  RerankConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RerankConf_descriptor_,
      RerankConf::default_instance_,
      RerankConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RerankConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RerankConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RerankConf));
  RerankConfs_descriptor_ = file->message_type(6);
  static const int RerankConfs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RerankConfs, reranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RerankConfs, flag_),
  };
  RerankConfs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RerankConfs_descriptor_,
      RerankConfs::default_instance_,
      RerankConfs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RerankConfs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RerankConfs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RerankConfs));
  RankConf_descriptor_ = file->message_type(7);
  static const int RankConf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConf, host_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConf, api_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConf, conf_),
  };
  RankConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankConf_descriptor_,
      RankConf::default_instance_,
      RankConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankConf));
  ProfileConf_descriptor_ = file->message_type(8);
  static const int ProfileConf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileConf, host_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileConf, api_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileConf, conf_),
  };
  ProfileConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfileConf_descriptor_,
      ProfileConf::default_instance_,
      ProfileConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfileConf));
  RerankServiceConf_descriptor_ = file->message_type(9);
  static const int RerankServiceConf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RerankServiceConf, host_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RerankServiceConf, api_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RerankServiceConf, conf_),
  };
  RerankServiceConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RerankServiceConf_descriptor_,
      RerankServiceConf::default_instance_,
      RerankServiceConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RerankServiceConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RerankServiceConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RerankServiceConf));
  ReloadScript_descriptor_ = file->message_type(10);
  static const int ReloadScript_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReloadScript, file_name_),
  };
  ReloadScript_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReloadScript_descriptor_,
      ReloadScript::default_instance_,
      ReloadScript_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReloadScript, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReloadScript, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReloadScript));
  Range_descriptor_ = file->message_type(11);
  static const int Range_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, max_),
  };
  Range_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Range_descriptor_,
      Range::default_instance_,
      Range_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Range));
  BaseImage_descriptor_ = file->message_type(12);
  static const int BaseImage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseImage, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseImage, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseImage, edu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseImage, job_),
  };
  BaseImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseImage_descriptor_,
      BaseImage::default_instance_,
      BaseImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseImage));
  RegionImage_descriptor_ = file->message_type(13);
  static const int RegionImage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionImage, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionImage, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionImage, city_),
  };
  RegionImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegionImage_descriptor_,
      RegionImage::default_instance_,
      RegionImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegionImage));
  InterestImage_descriptor_ = file->message_type(14);
  static const int InterestImage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterestImage, first_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterestImage, second_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterestImage, third_level_),
  };
  InterestImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InterestImage_descriptor_,
      InterestImage::default_instance_,
      InterestImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterestImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterestImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InterestImage));
  BaseScene_descriptor_ = file->message_type(15);
  static const int BaseScene_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseScene, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseScene, net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseScene, platform_),
  };
  BaseScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseScene_descriptor_,
      BaseScene::default_instance_,
      BaseScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseScene));
  CurrentPosition_descriptor_ = file->message_type(16);
  static const int CurrentPosition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPosition, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPosition, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPosition, city_),
  };
  CurrentPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrentPosition_descriptor_,
      CurrentPosition::default_instance_,
      CurrentPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrentPosition));
  ExposureScene_descriptor_ = file->message_type(17);
  static const int ExposureScene_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExposureScene, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExposureScene, alg_version_),
  };
  ExposureScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExposureScene_descriptor_,
      ExposureScene::default_instance_,
      ExposureScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExposureScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExposureScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExposureScene));
  TriggerConfExt_descriptor_ = file->message_type(18);
  static const int TriggerConfExt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerConfExt, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerConfExt, conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerConfExt, ctr_),
  };
  TriggerConfExt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TriggerConfExt_descriptor_,
      TriggerConfExt::default_instance_,
      TriggerConfExt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerConfExt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerConfExt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TriggerConfExt));
  PolicyConf_descriptor_ = file->message_type(19);
  static const int PolicyConf_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, exposure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, triggers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, filters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, reranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, triggersconf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, for_new_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, rerank_srv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, playconf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, profile_),
  };
  PolicyConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PolicyConf_descriptor_,
      PolicyConf::default_instance_,
      PolicyConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PolicyConf));
  PolicyConfs_descriptor_ = file->message_type(20);
  static const int PolicyConfs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConfs, policys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConfs, flag_),
  };
  PolicyConfs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PolicyConfs_descriptor_,
      PolicyConfs::default_instance_,
      PolicyConfs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConfs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyConfs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PolicyConfs));
  WhiteListConf_descriptor_ = file->message_type(21);
  static const int WhiteListConf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteListConf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteListConf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteListConf, wlfile_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteListConf, policys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteListConf, flag_),
  };
  WhiteListConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhiteListConf_descriptor_,
      WhiteListConf::default_instance_,
      WhiteListConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteListConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiteListConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhiteListConf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Proto_2fPolicy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Conf_descriptor_, &Conf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TriggerConf_descriptor_, &TriggerConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TriggerConfs_descriptor_, &TriggerConfs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilterConf_descriptor_, &FilterConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilterConfs_descriptor_, &FilterConfs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RerankConf_descriptor_, &RerankConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RerankConfs_descriptor_, &RerankConfs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankConf_descriptor_, &RankConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfileConf_descriptor_, &ProfileConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RerankServiceConf_descriptor_, &RerankServiceConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReloadScript_descriptor_, &ReloadScript::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Range_descriptor_, &Range::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseImage_descriptor_, &BaseImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegionImage_descriptor_, &RegionImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InterestImage_descriptor_, &InterestImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseScene_descriptor_, &BaseScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrentPosition_descriptor_, &CurrentPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExposureScene_descriptor_, &ExposureScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TriggerConfExt_descriptor_, &TriggerConfExt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PolicyConf_descriptor_, &PolicyConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PolicyConfs_descriptor_, &PolicyConfs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhiteListConf_descriptor_, &WhiteListConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Proto_2fPolicy_2eproto() {
  delete Conf::default_instance_;
  delete Conf_reflection_;
  delete TriggerConf::default_instance_;
  delete TriggerConf_reflection_;
  delete TriggerConfs::default_instance_;
  delete TriggerConfs_reflection_;
  delete FilterConf::default_instance_;
  delete FilterConf_reflection_;
  delete FilterConfs::default_instance_;
  delete FilterConfs_reflection_;
  delete RerankConf::default_instance_;
  delete RerankConf_reflection_;
  delete RerankConfs::default_instance_;
  delete RerankConfs_reflection_;
  delete RankConf::default_instance_;
  delete RankConf_reflection_;
  delete ProfileConf::default_instance_;
  delete ProfileConf_reflection_;
  delete RerankServiceConf::default_instance_;
  delete RerankServiceConf_reflection_;
  delete ReloadScript::default_instance_;
  delete ReloadScript_reflection_;
  delete Range::default_instance_;
  delete Range_reflection_;
  delete BaseImage::default_instance_;
  delete BaseImage_reflection_;
  delete RegionImage::default_instance_;
  delete RegionImage_reflection_;
  delete InterestImage::default_instance_;
  delete InterestImage_reflection_;
  delete BaseScene::default_instance_;
  delete BaseScene_reflection_;
  delete CurrentPosition::default_instance_;
  delete CurrentPosition_reflection_;
  delete ExposureScene::default_instance_;
  delete ExposureScene_reflection_;
  delete TriggerConfExt::default_instance_;
  delete TriggerConfExt_reflection_;
  delete PolicyConf::default_instance_;
  delete PolicyConf_reflection_;
  delete PolicyConfs::default_instance_;
  delete PolicyConfs_reflection_;
  delete WhiteListConf::default_instance_;
  delete WhiteListConf_reflection_;
}

void protobuf_AddDesc_Proto_2fPolicy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022Proto/Policy.proto\"\"\n\004Conf\022\013\n\003key\030\001 \002("
    "\014\022\r\n\005value\030\002 \002(\014\"\\\n\013TriggerConf\022\n\n\002id\030\001 "
    "\002(\r\022\014\n\004name\030\002 \002(\014\022\021\n\thost_name\030\003 \002(\014\022\013\n\003"
    "api\030\004 \002(\014\022\023\n\004conf\030\005 \003(\0132\005.Conf\"<\n\014Trigge"
    "rConfs\022\036\n\010triggers\030\001 \003(\0132\014.TriggerConf\022\014"
    "\n\004flag\030\002 \002(\010\"9\n\nFilterConf\022\n\n\002id\030\001 \002(\r\022\014"
    "\n\004name\030\002 \002(\014\022\021\n\tfile_name\030\003 \002(\014\"9\n\013Filte"
    "rConfs\022\034\n\007filters\030\001 \003(\0132\013.FilterConf\022\014\n\004"
    "flag\030\002 \002(\010\"9\n\nRerankConf\022\n\n\002id\030\001 \002(\r\022\014\n\004"
    "name\030\002 \002(\014\022\021\n\tfile_name\030\003 \002(\014\"9\n\013RerankC"
    "onfs\022\034\n\007reranks\030\001 \003(\0132\013.RerankConf\022\014\n\004fl"
    "ag\030\002 \002(\010\"\?\n\010RankConf\022\021\n\thost_name\030\001 \002(\014\022"
    "\013\n\003api\030\002 \002(\014\022\023\n\004conf\030\003 \003(\0132\005.Conf\"B\n\013Pro"
    "fileConf\022\021\n\thost_name\030\001 \002(\014\022\013\n\003api\030\002 \002(\014"
    "\022\023\n\004conf\030\003 \003(\0132\005.Conf\"H\n\021RerankServiceCo"
    "nf\022\021\n\thost_name\030\001 \002(\014\022\013\n\003api\030\002 \002(\014\022\023\n\004co"
    "nf\030\003 \003(\0132\005.Conf\"!\n\014ReloadScript\022\021\n\tfile_"
    "name\030\001 \002(\014\"!\n\005Range\022\013\n\003min\030\001 \002(\005\022\013\n\003max\030"
    "\002 \002(\005\"G\n\tBaseImage\022\013\n\003sex\030\001 \002(\005\022\023\n\003age\030\002"
    " \003(\0132\006.Range\022\013\n\003edu\030\003 \003(\014\022\013\n\003job\030\004 \003(\014\">"
    "\n\013RegionImage\022\017\n\007country\030\001 \003(\005\022\020\n\010provin"
    "ce\030\002 \003(\005\022\014\n\004city\030\003 \003(\005\"O\n\rInterestImage\022"
    "\023\n\013first_level\030\001 \003(\005\022\024\n\014second_level\030\002 \003"
    "(\005\022\023\n\013third_level\030\003 \003(\005\"6\n\tBaseScene\022\n\n\002"
    "os\030\001 \003(\014\022\013\n\003net\030\002 \003(\014\022\020\n\010platform\030\003 \003(\014\""
    "B\n\017CurrentPosition\022\017\n\007country\030\001 \003(\005\022\020\n\010p"
    "rovince\030\002 \003(\005\022\014\n\004city\030\003 \003(\005\"5\n\rExposureS"
    "cene\022\017\n\007channel\030\001 \003(\014\022\023\n\013alg_version\030\002 \001"
    "(\r\">\n\016TriggerConfExt\022\n\n\002id\030\001 \002(\r\022\023\n\004conf"
    "\030\002 \003(\0132\005.Conf\022\013\n\003ctr\030\003 \001(\010\"\331\003\n\nPolicyCon"
    "f\022\n\n\002id\030\001 \002(\r\022\014\n\004name\030\002 \002(\014\022\030\n\004base\030\003 \001("
    "\0132\n.BaseImage\022\034\n\006region\030\004 \001(\0132\014.RegionIm"
    "age\022 \n\010interest\030\005 \001(\0132\016.InterestImage\022\031\n"
    "\005scene\030\006 \001(\0132\n.BaseScene\022\"\n\010position\030\007 \001"
    "(\0132\020.CurrentPosition\022 \n\010exposure\030\010 \001(\0132\016"
    ".ExposureScene\022\020\n\010triggers\030\t \003(\r\022\017\n\007filt"
    "ers\030\n \003(\r\022\017\n\007reranks\030\013 \003(\r\022\014\n\004flag\030\014 \002(\010"
    "\022%\n\014triggersconf\030\r \003(\0132\017.TriggerConfExt\022"
    "\027\n\004rank\030\017 \001(\0132\t.RankConf\022\024\n\014for_new_user"
    "\030\020 \001(\010\022&\n\nrerank_srv\030\021 \001(\0132\022.RerankServi"
    "ceConf\022\027\n\010playconf\030\022 \003(\0132\005.Conf\022\035\n\007profi"
    "le\030\023 \001(\0132\014.ProfileConf\"9\n\013PolicyConfs\022\034\n"
    "\007policys\030\001 \003(\0132\013.PolicyConf\022\014\n\004flag\030\002 \002("
    "\010\"]\n\rWhiteListConf\022\n\n\002id\030\001 \002(\r\022\014\n\004name\030\002"
    " \002(\014\022\023\n\013wlfile_path\030\003 \002(\014\022\017\n\007policys\030\004 \003"
    "(\r\022\014\n\004flag\030\005 \002(\010", 1816);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Proto/Policy.proto", &protobuf_RegisterTypes);
  Conf::default_instance_ = new Conf();
  TriggerConf::default_instance_ = new TriggerConf();
  TriggerConfs::default_instance_ = new TriggerConfs();
  FilterConf::default_instance_ = new FilterConf();
  FilterConfs::default_instance_ = new FilterConfs();
  RerankConf::default_instance_ = new RerankConf();
  RerankConfs::default_instance_ = new RerankConfs();
  RankConf::default_instance_ = new RankConf();
  ProfileConf::default_instance_ = new ProfileConf();
  RerankServiceConf::default_instance_ = new RerankServiceConf();
  ReloadScript::default_instance_ = new ReloadScript();
  Range::default_instance_ = new Range();
  BaseImage::default_instance_ = new BaseImage();
  RegionImage::default_instance_ = new RegionImage();
  InterestImage::default_instance_ = new InterestImage();
  BaseScene::default_instance_ = new BaseScene();
  CurrentPosition::default_instance_ = new CurrentPosition();
  ExposureScene::default_instance_ = new ExposureScene();
  TriggerConfExt::default_instance_ = new TriggerConfExt();
  PolicyConf::default_instance_ = new PolicyConf();
  PolicyConfs::default_instance_ = new PolicyConfs();
  WhiteListConf::default_instance_ = new WhiteListConf();
  Conf::default_instance_->InitAsDefaultInstance();
  TriggerConf::default_instance_->InitAsDefaultInstance();
  TriggerConfs::default_instance_->InitAsDefaultInstance();
  FilterConf::default_instance_->InitAsDefaultInstance();
  FilterConfs::default_instance_->InitAsDefaultInstance();
  RerankConf::default_instance_->InitAsDefaultInstance();
  RerankConfs::default_instance_->InitAsDefaultInstance();
  RankConf::default_instance_->InitAsDefaultInstance();
  ProfileConf::default_instance_->InitAsDefaultInstance();
  RerankServiceConf::default_instance_->InitAsDefaultInstance();
  ReloadScript::default_instance_->InitAsDefaultInstance();
  Range::default_instance_->InitAsDefaultInstance();
  BaseImage::default_instance_->InitAsDefaultInstance();
  RegionImage::default_instance_->InitAsDefaultInstance();
  InterestImage::default_instance_->InitAsDefaultInstance();
  BaseScene::default_instance_->InitAsDefaultInstance();
  CurrentPosition::default_instance_->InitAsDefaultInstance();
  ExposureScene::default_instance_->InitAsDefaultInstance();
  TriggerConfExt::default_instance_->InitAsDefaultInstance();
  PolicyConf::default_instance_->InitAsDefaultInstance();
  PolicyConfs::default_instance_->InitAsDefaultInstance();
  WhiteListConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Proto_2fPolicy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Proto_2fPolicy_2eproto {
  StaticDescriptorInitializer_Proto_2fPolicy_2eproto() {
    protobuf_AddDesc_Proto_2fPolicy_2eproto();
  }
} static_descriptor_initializer_Proto_2fPolicy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Conf::kKeyFieldNumber;
const int Conf::kValueFieldNumber;
#endif  // !_MSC_VER

Conf::Conf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Conf)
}

void Conf::InitAsDefaultInstance() {
}

Conf::Conf(const Conf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Conf)
}

void Conf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Conf::~Conf() {
  // @@protoc_insertion_point(destructor:Conf)
  SharedDtor();
}

void Conf::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Conf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Conf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Conf_descriptor_;
}

const Conf& Conf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

Conf* Conf::default_instance_ = NULL;

Conf* Conf::New() const {
  return new Conf;
}

void Conf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Conf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Conf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Conf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Conf)
  return false;
#undef DO_
}

void Conf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Conf)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Conf)
}

::google::protobuf::uint8* Conf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Conf)
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Conf)
  return target;
}

int Conf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Conf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Conf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Conf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Conf::MergeFrom(const Conf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Conf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conf::CopyFrom(const Conf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Conf::Swap(Conf* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Conf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Conf_descriptor_;
  metadata.reflection = Conf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TriggerConf::kIdFieldNumber;
const int TriggerConf::kNameFieldNumber;
const int TriggerConf::kHostNameFieldNumber;
const int TriggerConf::kApiFieldNumber;
const int TriggerConf::kConfFieldNumber;
#endif  // !_MSC_VER

TriggerConf::TriggerConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TriggerConf)
}

void TriggerConf::InitAsDefaultInstance() {
}

TriggerConf::TriggerConf(const TriggerConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TriggerConf)
}

void TriggerConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TriggerConf::~TriggerConf() {
  // @@protoc_insertion_point(destructor:TriggerConf)
  SharedDtor();
}

void TriggerConf::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_name_;
  }
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete api_;
  }
  if (this != default_instance_) {
  }
}

void TriggerConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TriggerConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerConf_descriptor_;
}

const TriggerConf& TriggerConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

TriggerConf* TriggerConf::default_instance_ = NULL;

TriggerConf* TriggerConf::New() const {
  return new TriggerConf;
}

void TriggerConf::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_host_name()) {
      if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_name_->clear();
      }
    }
    if (has_api()) {
      if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        api_->clear();
      }
    }
  }
  conf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TriggerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TriggerConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_host_name;
        break;
      }

      // required bytes host_name = 3;
      case 3: {
        if (tag == 26) {
         parse_host_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_host_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_api;
        break;
      }

      // required bytes api = 4;
      case 4: {
        if (tag == 34) {
         parse_api:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_api()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_conf;
        break;
      }

      // repeated .Conf conf = 5;
      case 5: {
        if (tag == 42) {
         parse_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_conf;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TriggerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TriggerConf)
  return false;
#undef DO_
}

void TriggerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TriggerConf)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required bytes host_name = 3;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->host_name(), output);
  }

  // required bytes api = 4;
  if (has_api()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->api(), output);
  }

  // repeated .Conf conf = 5;
  for (int i = 0; i < this->conf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->conf(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TriggerConf)
}

::google::protobuf::uint8* TriggerConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TriggerConf)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required bytes host_name = 3;
  if (has_host_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->host_name(), target);
  }

  // required bytes api = 4;
  if (has_api()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->api(), target);
  }

  // repeated .Conf conf = 5;
  for (int i = 0; i < this->conf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->conf(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TriggerConf)
  return target;
}

int TriggerConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes host_name = 3;
    if (has_host_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->host_name());
    }

    // required bytes api = 4;
    if (has_api()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->api());
    }

  }
  // repeated .Conf conf = 5;
  total_size += 1 * this->conf_size();
  for (int i = 0; i < this->conf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conf(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TriggerConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TriggerConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TriggerConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TriggerConf::MergeFrom(const TriggerConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  conf_.MergeFrom(from.conf_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_host_name()) {
      set_host_name(from.host_name());
    }
    if (from.has_api()) {
      set_api(from.api());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TriggerConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerConf::CopyFrom(const TriggerConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->conf())) return false;
  return true;
}

void TriggerConf::Swap(TriggerConf* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(host_name_, other->host_name_);
    std::swap(api_, other->api_);
    conf_.Swap(&other->conf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TriggerConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TriggerConf_descriptor_;
  metadata.reflection = TriggerConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TriggerConfs::kTriggersFieldNumber;
const int TriggerConfs::kFlagFieldNumber;
#endif  // !_MSC_VER

TriggerConfs::TriggerConfs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TriggerConfs)
}

void TriggerConfs::InitAsDefaultInstance() {
}

TriggerConfs::TriggerConfs(const TriggerConfs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TriggerConfs)
}

void TriggerConfs::SharedCtor() {
  _cached_size_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TriggerConfs::~TriggerConfs() {
  // @@protoc_insertion_point(destructor:TriggerConfs)
  SharedDtor();
}

void TriggerConfs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TriggerConfs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TriggerConfs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerConfs_descriptor_;
}

const TriggerConfs& TriggerConfs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

TriggerConfs* TriggerConfs::default_instance_ = NULL;

TriggerConfs* TriggerConfs::New() const {
  return new TriggerConfs;
}

void TriggerConfs::Clear() {
  flag_ = false;
  triggers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TriggerConfs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TriggerConfs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TriggerConf triggers = 1;
      case 1: {
        if (tag == 10) {
         parse_triggers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triggers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_triggers;
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required bool flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TriggerConfs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TriggerConfs)
  return false;
#undef DO_
}

void TriggerConfs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TriggerConfs)
  // repeated .TriggerConf triggers = 1;
  for (int i = 0; i < this->triggers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->triggers(i), output);
  }

  // required bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TriggerConfs)
}

::google::protobuf::uint8* TriggerConfs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TriggerConfs)
  // repeated .TriggerConf triggers = 1;
  for (int i = 0; i < this->triggers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->triggers(i), target);
  }

  // required bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TriggerConfs)
  return target;
}

int TriggerConfs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TriggerConf triggers = 1;
  total_size += 1 * this->triggers_size();
  for (int i = 0; i < this->triggers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triggers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TriggerConfs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TriggerConfs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TriggerConfs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TriggerConfs::MergeFrom(const TriggerConfs& from) {
  GOOGLE_CHECK_NE(&from, this);
  triggers_.MergeFrom(from.triggers_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TriggerConfs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerConfs::CopyFrom(const TriggerConfs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerConfs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->triggers())) return false;
  return true;
}

void TriggerConfs::Swap(TriggerConfs* other) {
  if (other != this) {
    triggers_.Swap(&other->triggers_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TriggerConfs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TriggerConfs_descriptor_;
  metadata.reflection = TriggerConfs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FilterConf::kIdFieldNumber;
const int FilterConf::kNameFieldNumber;
const int FilterConf::kFileNameFieldNumber;
#endif  // !_MSC_VER

FilterConf::FilterConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FilterConf)
}

void FilterConf::InitAsDefaultInstance() {
}

FilterConf::FilterConf(const FilterConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FilterConf)
}

void FilterConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilterConf::~FilterConf() {
  // @@protoc_insertion_point(destructor:FilterConf)
  SharedDtor();
}

void FilterConf::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void FilterConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterConf_descriptor_;
}

const FilterConf& FilterConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

FilterConf* FilterConf::default_instance_ = NULL;

FilterConf* FilterConf::New() const {
  return new FilterConf;
}

void FilterConf::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilterConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FilterConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // required bytes file_name = 3;
      case 3: {
        if (tag == 26) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FilterConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FilterConf)
  return false;
#undef DO_
}

void FilterConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FilterConf)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required bytes file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->file_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FilterConf)
}

::google::protobuf::uint8* FilterConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FilterConf)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required bytes file_name = 3;
  if (has_file_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->file_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FilterConf)
  return target;
}

int FilterConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes file_name = 3;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilterConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilterConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilterConf::MergeFrom(const FilterConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilterConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterConf::CopyFrom(const FilterConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FilterConf::Swap(FilterConf* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilterConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilterConf_descriptor_;
  metadata.reflection = FilterConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FilterConfs::kFiltersFieldNumber;
const int FilterConfs::kFlagFieldNumber;
#endif  // !_MSC_VER

FilterConfs::FilterConfs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FilterConfs)
}

void FilterConfs::InitAsDefaultInstance() {
}

FilterConfs::FilterConfs(const FilterConfs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FilterConfs)
}

void FilterConfs::SharedCtor() {
  _cached_size_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilterConfs::~FilterConfs() {
  // @@protoc_insertion_point(destructor:FilterConfs)
  SharedDtor();
}

void FilterConfs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FilterConfs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterConfs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterConfs_descriptor_;
}

const FilterConfs& FilterConfs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

FilterConfs* FilterConfs::default_instance_ = NULL;

FilterConfs* FilterConfs::New() const {
  return new FilterConfs;
}

void FilterConfs::Clear() {
  flag_ = false;
  filters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilterConfs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FilterConfs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FilterConf filters = 1;
      case 1: {
        if (tag == 10) {
         parse_filters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_filters;
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required bool flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FilterConfs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FilterConfs)
  return false;
#undef DO_
}

void FilterConfs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FilterConfs)
  // repeated .FilterConf filters = 1;
  for (int i = 0; i < this->filters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->filters(i), output);
  }

  // required bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FilterConfs)
}

::google::protobuf::uint8* FilterConfs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FilterConfs)
  // repeated .FilterConf filters = 1;
  for (int i = 0; i < this->filters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->filters(i), target);
  }

  // required bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FilterConfs)
  return target;
}

int FilterConfs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  // repeated .FilterConf filters = 1;
  total_size += 1 * this->filters_size();
  for (int i = 0; i < this->filters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterConfs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilterConfs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilterConfs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilterConfs::MergeFrom(const FilterConfs& from) {
  GOOGLE_CHECK_NE(&from, this);
  filters_.MergeFrom(from.filters_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilterConfs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterConfs::CopyFrom(const FilterConfs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterConfs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->filters())) return false;
  return true;
}

void FilterConfs::Swap(FilterConfs* other) {
  if (other != this) {
    filters_.Swap(&other->filters_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilterConfs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilterConfs_descriptor_;
  metadata.reflection = FilterConfs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RerankConf::kIdFieldNumber;
const int RerankConf::kNameFieldNumber;
const int RerankConf::kFileNameFieldNumber;
#endif  // !_MSC_VER

RerankConf::RerankConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RerankConf)
}

void RerankConf::InitAsDefaultInstance() {
}

RerankConf::RerankConf(const RerankConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RerankConf)
}

void RerankConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RerankConf::~RerankConf() {
  // @@protoc_insertion_point(destructor:RerankConf)
  SharedDtor();
}

void RerankConf::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void RerankConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RerankConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RerankConf_descriptor_;
}

const RerankConf& RerankConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

RerankConf* RerankConf::default_instance_ = NULL;

RerankConf* RerankConf::New() const {
  return new RerankConf;
}

void RerankConf::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RerankConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RerankConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // required bytes file_name = 3;
      case 3: {
        if (tag == 26) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RerankConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RerankConf)
  return false;
#undef DO_
}

void RerankConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RerankConf)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required bytes file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->file_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RerankConf)
}

::google::protobuf::uint8* RerankConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RerankConf)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required bytes file_name = 3;
  if (has_file_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->file_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RerankConf)
  return target;
}

int RerankConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes file_name = 3;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RerankConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RerankConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RerankConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RerankConf::MergeFrom(const RerankConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RerankConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RerankConf::CopyFrom(const RerankConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RerankConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RerankConf::Swap(RerankConf* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RerankConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RerankConf_descriptor_;
  metadata.reflection = RerankConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RerankConfs::kReranksFieldNumber;
const int RerankConfs::kFlagFieldNumber;
#endif  // !_MSC_VER

RerankConfs::RerankConfs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RerankConfs)
}

void RerankConfs::InitAsDefaultInstance() {
}

RerankConfs::RerankConfs(const RerankConfs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RerankConfs)
}

void RerankConfs::SharedCtor() {
  _cached_size_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RerankConfs::~RerankConfs() {
  // @@protoc_insertion_point(destructor:RerankConfs)
  SharedDtor();
}

void RerankConfs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RerankConfs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RerankConfs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RerankConfs_descriptor_;
}

const RerankConfs& RerankConfs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

RerankConfs* RerankConfs::default_instance_ = NULL;

RerankConfs* RerankConfs::New() const {
  return new RerankConfs;
}

void RerankConfs::Clear() {
  flag_ = false;
  reranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RerankConfs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RerankConfs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RerankConf reranks = 1;
      case 1: {
        if (tag == 10) {
         parse_reranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reranks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_reranks;
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required bool flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RerankConfs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RerankConfs)
  return false;
#undef DO_
}

void RerankConfs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RerankConfs)
  // repeated .RerankConf reranks = 1;
  for (int i = 0; i < this->reranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reranks(i), output);
  }

  // required bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RerankConfs)
}

::google::protobuf::uint8* RerankConfs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RerankConfs)
  // repeated .RerankConf reranks = 1;
  for (int i = 0; i < this->reranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reranks(i), target);
  }

  // required bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RerankConfs)
  return target;
}

int RerankConfs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  // repeated .RerankConf reranks = 1;
  total_size += 1 * this->reranks_size();
  for (int i = 0; i < this->reranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RerankConfs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RerankConfs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RerankConfs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RerankConfs::MergeFrom(const RerankConfs& from) {
  GOOGLE_CHECK_NE(&from, this);
  reranks_.MergeFrom(from.reranks_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RerankConfs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RerankConfs::CopyFrom(const RerankConfs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RerankConfs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reranks())) return false;
  return true;
}

void RerankConfs::Swap(RerankConfs* other) {
  if (other != this) {
    reranks_.Swap(&other->reranks_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RerankConfs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RerankConfs_descriptor_;
  metadata.reflection = RerankConfs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankConf::kHostNameFieldNumber;
const int RankConf::kApiFieldNumber;
const int RankConf::kConfFieldNumber;
#endif  // !_MSC_VER

RankConf::RankConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RankConf)
}

void RankConf::InitAsDefaultInstance() {
}

RankConf::RankConf(const RankConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RankConf)
}

void RankConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankConf::~RankConf() {
  // @@protoc_insertion_point(destructor:RankConf)
  SharedDtor();
}

void RankConf::SharedDtor() {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_name_;
  }
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete api_;
  }
  if (this != default_instance_) {
  }
}

void RankConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankConf_descriptor_;
}

const RankConf& RankConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

RankConf* RankConf::default_instance_ = NULL;

RankConf* RankConf::New() const {
  return new RankConf;
}

void RankConf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_host_name()) {
      if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_name_->clear();
      }
    }
    if (has_api()) {
      if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        api_->clear();
      }
    }
  }
  conf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RankConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes host_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_host_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_api;
        break;
      }

      // required bytes api = 2;
      case 2: {
        if (tag == 18) {
         parse_api:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_api()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_conf;
        break;
      }

      // repeated .Conf conf = 3;
      case 3: {
        if (tag == 26) {
         parse_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_conf;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RankConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RankConf)
  return false;
#undef DO_
}

void RankConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RankConf)
  // required bytes host_name = 1;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->host_name(), output);
  }

  // required bytes api = 2;
  if (has_api()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->api(), output);
  }

  // repeated .Conf conf = 3;
  for (int i = 0; i < this->conf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->conf(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RankConf)
}

::google::protobuf::uint8* RankConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RankConf)
  // required bytes host_name = 1;
  if (has_host_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->host_name(), target);
  }

  // required bytes api = 2;
  if (has_api()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->api(), target);
  }

  // repeated .Conf conf = 3;
  for (int i = 0; i < this->conf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->conf(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RankConf)
  return target;
}

int RankConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes host_name = 1;
    if (has_host_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->host_name());
    }

    // required bytes api = 2;
    if (has_api()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->api());
    }

  }
  // repeated .Conf conf = 3;
  total_size += 1 * this->conf_size();
  for (int i = 0; i < this->conf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conf(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankConf::MergeFrom(const RankConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  conf_.MergeFrom(from.conf_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host_name()) {
      set_host_name(from.host_name());
    }
    if (from.has_api()) {
      set_api(from.api());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankConf::CopyFrom(const RankConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->conf())) return false;
  return true;
}

void RankConf::Swap(RankConf* other) {
  if (other != this) {
    std::swap(host_name_, other->host_name_);
    std::swap(api_, other->api_);
    conf_.Swap(&other->conf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankConf_descriptor_;
  metadata.reflection = RankConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProfileConf::kHostNameFieldNumber;
const int ProfileConf::kApiFieldNumber;
const int ProfileConf::kConfFieldNumber;
#endif  // !_MSC_VER

ProfileConf::ProfileConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProfileConf)
}

void ProfileConf::InitAsDefaultInstance() {
}

ProfileConf::ProfileConf(const ProfileConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProfileConf)
}

void ProfileConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfileConf::~ProfileConf() {
  // @@protoc_insertion_point(destructor:ProfileConf)
  SharedDtor();
}

void ProfileConf::SharedDtor() {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_name_;
  }
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete api_;
  }
  if (this != default_instance_) {
  }
}

void ProfileConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfileConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfileConf_descriptor_;
}

const ProfileConf& ProfileConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

ProfileConf* ProfileConf::default_instance_ = NULL;

ProfileConf* ProfileConf::New() const {
  return new ProfileConf;
}

void ProfileConf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_host_name()) {
      if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_name_->clear();
      }
    }
    if (has_api()) {
      if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        api_->clear();
      }
    }
  }
  conf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfileConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProfileConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes host_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_host_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_api;
        break;
      }

      // required bytes api = 2;
      case 2: {
        if (tag == 18) {
         parse_api:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_api()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_conf;
        break;
      }

      // repeated .Conf conf = 3;
      case 3: {
        if (tag == 26) {
         parse_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_conf;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProfileConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProfileConf)
  return false;
#undef DO_
}

void ProfileConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProfileConf)
  // required bytes host_name = 1;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->host_name(), output);
  }

  // required bytes api = 2;
  if (has_api()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->api(), output);
  }

  // repeated .Conf conf = 3;
  for (int i = 0; i < this->conf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->conf(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProfileConf)
}

::google::protobuf::uint8* ProfileConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfileConf)
  // required bytes host_name = 1;
  if (has_host_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->host_name(), target);
  }

  // required bytes api = 2;
  if (has_api()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->api(), target);
  }

  // repeated .Conf conf = 3;
  for (int i = 0; i < this->conf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->conf(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfileConf)
  return target;
}

int ProfileConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes host_name = 1;
    if (has_host_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->host_name());
    }

    // required bytes api = 2;
    if (has_api()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->api());
    }

  }
  // repeated .Conf conf = 3;
  total_size += 1 * this->conf_size();
  for (int i = 0; i < this->conf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conf(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfileConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfileConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfileConf::MergeFrom(const ProfileConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  conf_.MergeFrom(from.conf_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host_name()) {
      set_host_name(from.host_name());
    }
    if (from.has_api()) {
      set_api(from.api());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfileConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileConf::CopyFrom(const ProfileConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->conf())) return false;
  return true;
}

void ProfileConf::Swap(ProfileConf* other) {
  if (other != this) {
    std::swap(host_name_, other->host_name_);
    std::swap(api_, other->api_);
    conf_.Swap(&other->conf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfileConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfileConf_descriptor_;
  metadata.reflection = ProfileConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RerankServiceConf::kHostNameFieldNumber;
const int RerankServiceConf::kApiFieldNumber;
const int RerankServiceConf::kConfFieldNumber;
#endif  // !_MSC_VER

RerankServiceConf::RerankServiceConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RerankServiceConf)
}

void RerankServiceConf::InitAsDefaultInstance() {
}

RerankServiceConf::RerankServiceConf(const RerankServiceConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RerankServiceConf)
}

void RerankServiceConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RerankServiceConf::~RerankServiceConf() {
  // @@protoc_insertion_point(destructor:RerankServiceConf)
  SharedDtor();
}

void RerankServiceConf::SharedDtor() {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_name_;
  }
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete api_;
  }
  if (this != default_instance_) {
  }
}

void RerankServiceConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RerankServiceConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RerankServiceConf_descriptor_;
}

const RerankServiceConf& RerankServiceConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

RerankServiceConf* RerankServiceConf::default_instance_ = NULL;

RerankServiceConf* RerankServiceConf::New() const {
  return new RerankServiceConf;
}

void RerankServiceConf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_host_name()) {
      if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_name_->clear();
      }
    }
    if (has_api()) {
      if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        api_->clear();
      }
    }
  }
  conf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RerankServiceConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RerankServiceConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes host_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_host_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_api;
        break;
      }

      // required bytes api = 2;
      case 2: {
        if (tag == 18) {
         parse_api:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_api()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_conf;
        break;
      }

      // repeated .Conf conf = 3;
      case 3: {
        if (tag == 26) {
         parse_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_conf;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RerankServiceConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RerankServiceConf)
  return false;
#undef DO_
}

void RerankServiceConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RerankServiceConf)
  // required bytes host_name = 1;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->host_name(), output);
  }

  // required bytes api = 2;
  if (has_api()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->api(), output);
  }

  // repeated .Conf conf = 3;
  for (int i = 0; i < this->conf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->conf(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RerankServiceConf)
}

::google::protobuf::uint8* RerankServiceConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RerankServiceConf)
  // required bytes host_name = 1;
  if (has_host_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->host_name(), target);
  }

  // required bytes api = 2;
  if (has_api()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->api(), target);
  }

  // repeated .Conf conf = 3;
  for (int i = 0; i < this->conf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->conf(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RerankServiceConf)
  return target;
}

int RerankServiceConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes host_name = 1;
    if (has_host_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->host_name());
    }

    // required bytes api = 2;
    if (has_api()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->api());
    }

  }
  // repeated .Conf conf = 3;
  total_size += 1 * this->conf_size();
  for (int i = 0; i < this->conf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conf(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RerankServiceConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RerankServiceConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RerankServiceConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RerankServiceConf::MergeFrom(const RerankServiceConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  conf_.MergeFrom(from.conf_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host_name()) {
      set_host_name(from.host_name());
    }
    if (from.has_api()) {
      set_api(from.api());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RerankServiceConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RerankServiceConf::CopyFrom(const RerankServiceConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RerankServiceConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->conf())) return false;
  return true;
}

void RerankServiceConf::Swap(RerankServiceConf* other) {
  if (other != this) {
    std::swap(host_name_, other->host_name_);
    std::swap(api_, other->api_);
    conf_.Swap(&other->conf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RerankServiceConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RerankServiceConf_descriptor_;
  metadata.reflection = RerankServiceConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReloadScript::kFileNameFieldNumber;
#endif  // !_MSC_VER

ReloadScript::ReloadScript()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReloadScript)
}

void ReloadScript::InitAsDefaultInstance() {
}

ReloadScript::ReloadScript(const ReloadScript& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReloadScript)
}

void ReloadScript::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReloadScript::~ReloadScript() {
  // @@protoc_insertion_point(destructor:ReloadScript)
  SharedDtor();
}

void ReloadScript::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void ReloadScript::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReloadScript::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReloadScript_descriptor_;
}

const ReloadScript& ReloadScript::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

ReloadScript* ReloadScript::default_instance_ = NULL;

ReloadScript* ReloadScript::New() const {
  return new ReloadScript;
}

void ReloadScript::Clear() {
  if (has_file_name()) {
    if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      file_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReloadScript::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReloadScript)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReloadScript)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReloadScript)
  return false;
#undef DO_
}

void ReloadScript::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReloadScript)
  // required bytes file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->file_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ReloadScript)
}

::google::protobuf::uint8* ReloadScript::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReloadScript)
  // required bytes file_name = 1;
  if (has_file_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->file_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReloadScript)
  return target;
}

int ReloadScript::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReloadScript::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReloadScript* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReloadScript*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReloadScript::MergeFrom(const ReloadScript& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReloadScript::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReloadScript::CopyFrom(const ReloadScript& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReloadScript::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReloadScript::Swap(ReloadScript* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReloadScript::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReloadScript_descriptor_;
  metadata.reflection = ReloadScript_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Range::kMinFieldNumber;
const int Range::kMaxFieldNumber;
#endif  // !_MSC_VER

Range::Range()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Range)
}

void Range::InitAsDefaultInstance() {
}

Range::Range(const Range& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Range)
}

void Range::SharedCtor() {
  _cached_size_ = 0;
  min_ = 0;
  max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:Range)
  SharedDtor();
}

void Range::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Range::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Range_descriptor_;
}

const Range& Range::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

Range* Range::default_instance_ = NULL;

Range* Range::New() const {
  return new Range;
}

void Range::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Range*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(min_, max_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Range)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 min = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max;
        break;
      }

      // required int32 max = 2;
      case 2: {
        if (tag == 16) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Range)
  return false;
#undef DO_
}

void Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Range)
  // required int32 min = 1;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min(), output);
  }

  // required int32 max = 2;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Range)
}

::google::protobuf::uint8* Range::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Range)
  // required int32 min = 1;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->min(), target);
  }

  // required int32 max = 2;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Range)
  return target;
}

int Range::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 min = 1;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min());
    }

    // required int32 max = 2;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Range::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Range* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Range*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Range::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Range::Swap(Range* other) {
  if (other != this) {
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Range::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Range_descriptor_;
  metadata.reflection = Range_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseImage::kSexFieldNumber;
const int BaseImage::kAgeFieldNumber;
const int BaseImage::kEduFieldNumber;
const int BaseImage::kJobFieldNumber;
#endif  // !_MSC_VER

BaseImage::BaseImage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BaseImage)
}

void BaseImage::InitAsDefaultInstance() {
}

BaseImage::BaseImage(const BaseImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BaseImage)
}

void BaseImage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseImage::~BaseImage() {
  // @@protoc_insertion_point(destructor:BaseImage)
  SharedDtor();
}

void BaseImage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaseImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseImage_descriptor_;
}

const BaseImage& BaseImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

BaseImage* BaseImage::default_instance_ = NULL;

BaseImage* BaseImage::New() const {
  return new BaseImage;
}

void BaseImage::Clear() {
  sex_ = 0;
  age_.Clear();
  edu_.Clear();
  job_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BaseImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_age;
        break;
      }

      // repeated .Range age = 2;
      case 2: {
        if (tag == 18) {
         parse_age:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_age()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_age;
        if (input->ExpectTag(26)) goto parse_edu;
        break;
      }

      // repeated bytes edu = 3;
      case 3: {
        if (tag == 26) {
         parse_edu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_edu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_edu;
        if (input->ExpectTag(34)) goto parse_job;
        break;
      }

      // repeated bytes job = 4;
      case 4: {
        if (tag == 34) {
         parse_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_job()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_job;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BaseImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BaseImage)
  return false;
#undef DO_
}

void BaseImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BaseImage)
  // required int32 sex = 1;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sex(), output);
  }

  // repeated .Range age = 2;
  for (int i = 0; i < this->age_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->age(i), output);
  }

  // repeated bytes edu = 3;
  for (int i = 0; i < this->edu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->edu(i), output);
  }

  // repeated bytes job = 4;
  for (int i = 0; i < this->job_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->job(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BaseImage)
}

::google::protobuf::uint8* BaseImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BaseImage)
  // required int32 sex = 1;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sex(), target);
  }

  // repeated .Range age = 2;
  for (int i = 0; i < this->age_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->age(i), target);
  }

  // repeated bytes edu = 3;
  for (int i = 0; i < this->edu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->edu(i), target);
  }

  // repeated bytes job = 4;
  for (int i = 0; i < this->job_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->job(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BaseImage)
  return target;
}

int BaseImage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sex = 1;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  // repeated .Range age = 2;
  total_size += 1 * this->age_size();
  for (int i = 0; i < this->age_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->age(i));
  }

  // repeated bytes edu = 3;
  total_size += 1 * this->edu_size();
  for (int i = 0; i < this->edu_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->edu(i));
  }

  // repeated bytes job = 4;
  total_size += 1 * this->job_size();
  for (int i = 0; i < this->job_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->job(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseImage::MergeFrom(const BaseImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  age_.MergeFrom(from.age_);
  edu_.MergeFrom(from.edu_);
  job_.MergeFrom(from.job_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseImage::CopyFrom(const BaseImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->age())) return false;
  return true;
}

void BaseImage::Swap(BaseImage* other) {
  if (other != this) {
    std::swap(sex_, other->sex_);
    age_.Swap(&other->age_);
    edu_.Swap(&other->edu_);
    job_.Swap(&other->job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseImage_descriptor_;
  metadata.reflection = BaseImage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegionImage::kCountryFieldNumber;
const int RegionImage::kProvinceFieldNumber;
const int RegionImage::kCityFieldNumber;
#endif  // !_MSC_VER

RegionImage::RegionImage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegionImage)
}

void RegionImage::InitAsDefaultInstance() {
}

RegionImage::RegionImage(const RegionImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RegionImage)
}

void RegionImage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegionImage::~RegionImage() {
  // @@protoc_insertion_point(destructor:RegionImage)
  SharedDtor();
}

void RegionImage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegionImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionImage_descriptor_;
}

const RegionImage& RegionImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

RegionImage* RegionImage::default_instance_ = NULL;

RegionImage* RegionImage::New() const {
  return new RegionImage;
}

void RegionImage::Clear() {
  country_.Clear();
  province_.Clear();
  city_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegionImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RegionImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 country = 1;
      case 1: {
        if (tag == 8) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_country())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_country())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_country;
        if (input->ExpectTag(16)) goto parse_province;
        break;
      }

      // repeated int32 province = 2;
      case 2: {
        if (tag == 16) {
         parse_province:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_province())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_province())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_province;
        if (input->ExpectTag(24)) goto parse_city;
        break;
      }

      // repeated int32 city = 3;
      case 3: {
        if (tag == 24) {
         parse_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_city())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_city())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_city;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RegionImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RegionImage)
  return false;
#undef DO_
}

void RegionImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RegionImage)
  // repeated int32 country = 1;
  for (int i = 0; i < this->country_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->country(i), output);
  }

  // repeated int32 province = 2;
  for (int i = 0; i < this->province_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->province(i), output);
  }

  // repeated int32 city = 3;
  for (int i = 0; i < this->city_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->city(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RegionImage)
}

::google::protobuf::uint8* RegionImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegionImage)
  // repeated int32 country = 1;
  for (int i = 0; i < this->country_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->country(i), target);
  }

  // repeated int32 province = 2;
  for (int i = 0; i < this->province_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->province(i), target);
  }

  // repeated int32 city = 3;
  for (int i = 0; i < this->city_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->city(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegionImage)
  return target;
}

int RegionImage::ByteSize() const {
  int total_size = 0;

  // repeated int32 country = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->country_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->country(i));
    }
    total_size += 1 * this->country_size() + data_size;
  }

  // repeated int32 province = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->province_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->province(i));
    }
    total_size += 1 * this->province_size() + data_size;
  }

  // repeated int32 city = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->city_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->city(i));
    }
    total_size += 1 * this->city_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegionImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegionImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegionImage::MergeFrom(const RegionImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  country_.MergeFrom(from.country_);
  province_.MergeFrom(from.province_);
  city_.MergeFrom(from.city_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegionImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionImage::CopyFrom(const RegionImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionImage::IsInitialized() const {

  return true;
}

void RegionImage::Swap(RegionImage* other) {
  if (other != this) {
    country_.Swap(&other->country_);
    province_.Swap(&other->province_);
    city_.Swap(&other->city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegionImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionImage_descriptor_;
  metadata.reflection = RegionImage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InterestImage::kFirstLevelFieldNumber;
const int InterestImage::kSecondLevelFieldNumber;
const int InterestImage::kThirdLevelFieldNumber;
#endif  // !_MSC_VER

InterestImage::InterestImage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InterestImage)
}

void InterestImage::InitAsDefaultInstance() {
}

InterestImage::InterestImage(const InterestImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InterestImage)
}

void InterestImage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InterestImage::~InterestImage() {
  // @@protoc_insertion_point(destructor:InterestImage)
  SharedDtor();
}

void InterestImage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InterestImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterestImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InterestImage_descriptor_;
}

const InterestImage& InterestImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

InterestImage* InterestImage::default_instance_ = NULL;

InterestImage* InterestImage::New() const {
  return new InterestImage;
}

void InterestImage::Clear() {
  first_level_.Clear();
  second_level_.Clear();
  third_level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InterestImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InterestImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 first_level = 1;
      case 1: {
        if (tag == 8) {
         parse_first_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_first_level())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_first_level())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_first_level;
        if (input->ExpectTag(16)) goto parse_second_level;
        break;
      }

      // repeated int32 second_level = 2;
      case 2: {
        if (tag == 16) {
         parse_second_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_second_level())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_second_level())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_second_level;
        if (input->ExpectTag(24)) goto parse_third_level;
        break;
      }

      // repeated int32 third_level = 3;
      case 3: {
        if (tag == 24) {
         parse_third_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_third_level())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_third_level())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_third_level;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InterestImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InterestImage)
  return false;
#undef DO_
}

void InterestImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InterestImage)
  // repeated int32 first_level = 1;
  for (int i = 0; i < this->first_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->first_level(i), output);
  }

  // repeated int32 second_level = 2;
  for (int i = 0; i < this->second_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->second_level(i), output);
  }

  // repeated int32 third_level = 3;
  for (int i = 0; i < this->third_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->third_level(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InterestImage)
}

::google::protobuf::uint8* InterestImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InterestImage)
  // repeated int32 first_level = 1;
  for (int i = 0; i < this->first_level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->first_level(i), target);
  }

  // repeated int32 second_level = 2;
  for (int i = 0; i < this->second_level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->second_level(i), target);
  }

  // repeated int32 third_level = 3;
  for (int i = 0; i < this->third_level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->third_level(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InterestImage)
  return target;
}

int InterestImage::ByteSize() const {
  int total_size = 0;

  // repeated int32 first_level = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->first_level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->first_level(i));
    }
    total_size += 1 * this->first_level_size() + data_size;
  }

  // repeated int32 second_level = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->second_level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->second_level(i));
    }
    total_size += 1 * this->second_level_size() + data_size;
  }

  // repeated int32 third_level = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->third_level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->third_level(i));
    }
    total_size += 1 * this->third_level_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterestImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InterestImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InterestImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InterestImage::MergeFrom(const InterestImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  first_level_.MergeFrom(from.first_level_);
  second_level_.MergeFrom(from.second_level_);
  third_level_.MergeFrom(from.third_level_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InterestImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterestImage::CopyFrom(const InterestImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterestImage::IsInitialized() const {

  return true;
}

void InterestImage::Swap(InterestImage* other) {
  if (other != this) {
    first_level_.Swap(&other->first_level_);
    second_level_.Swap(&other->second_level_);
    third_level_.Swap(&other->third_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InterestImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InterestImage_descriptor_;
  metadata.reflection = InterestImage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseScene::kOsFieldNumber;
const int BaseScene::kNetFieldNumber;
const int BaseScene::kPlatformFieldNumber;
#endif  // !_MSC_VER

BaseScene::BaseScene()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BaseScene)
}

void BaseScene::InitAsDefaultInstance() {
}

BaseScene::BaseScene(const BaseScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BaseScene)
}

void BaseScene::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseScene::~BaseScene() {
  // @@protoc_insertion_point(destructor:BaseScene)
  SharedDtor();
}

void BaseScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaseScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseScene_descriptor_;
}

const BaseScene& BaseScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

BaseScene* BaseScene::default_instance_ = NULL;

BaseScene* BaseScene::New() const {
  return new BaseScene;
}

void BaseScene::Clear() {
  os_.Clear();
  net_.Clear();
  platform_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BaseScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes os = 1;
      case 1: {
        if (tag == 10) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_os()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_os;
        if (input->ExpectTag(18)) goto parse_net;
        break;
      }

      // repeated bytes net = 2;
      case 2: {
        if (tag == 18) {
         parse_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_net()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_net;
        if (input->ExpectTag(26)) goto parse_platform;
        break;
      }

      // repeated bytes platform = 3;
      case 3: {
        if (tag == 26) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_platform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_platform;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BaseScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BaseScene)
  return false;
#undef DO_
}

void BaseScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BaseScene)
  // repeated bytes os = 1;
  for (int i = 0; i < this->os_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->os(i), output);
  }

  // repeated bytes net = 2;
  for (int i = 0; i < this->net_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->net(i), output);
  }

  // repeated bytes platform = 3;
  for (int i = 0; i < this->platform_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->platform(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BaseScene)
}

::google::protobuf::uint8* BaseScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BaseScene)
  // repeated bytes os = 1;
  for (int i = 0; i < this->os_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->os(i), target);
  }

  // repeated bytes net = 2;
  for (int i = 0; i < this->net_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->net(i), target);
  }

  // repeated bytes platform = 3;
  for (int i = 0; i < this->platform_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->platform(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BaseScene)
  return target;
}

int BaseScene::ByteSize() const {
  int total_size = 0;

  // repeated bytes os = 1;
  total_size += 1 * this->os_size();
  for (int i = 0; i < this->os_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->os(i));
  }

  // repeated bytes net = 2;
  total_size += 1 * this->net_size();
  for (int i = 0; i < this->net_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->net(i));
  }

  // repeated bytes platform = 3;
  total_size += 1 * this->platform_size();
  for (int i = 0; i < this->platform_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->platform(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseScene::MergeFrom(const BaseScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  os_.MergeFrom(from.os_);
  net_.MergeFrom(from.net_);
  platform_.MergeFrom(from.platform_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseScene::CopyFrom(const BaseScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseScene::IsInitialized() const {

  return true;
}

void BaseScene::Swap(BaseScene* other) {
  if (other != this) {
    os_.Swap(&other->os_);
    net_.Swap(&other->net_);
    platform_.Swap(&other->platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseScene_descriptor_;
  metadata.reflection = BaseScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrentPosition::kCountryFieldNumber;
const int CurrentPosition::kProvinceFieldNumber;
const int CurrentPosition::kCityFieldNumber;
#endif  // !_MSC_VER

CurrentPosition::CurrentPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CurrentPosition)
}

void CurrentPosition::InitAsDefaultInstance() {
}

CurrentPosition::CurrentPosition(const CurrentPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CurrentPosition)
}

void CurrentPosition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrentPosition::~CurrentPosition() {
  // @@protoc_insertion_point(destructor:CurrentPosition)
  SharedDtor();
}

void CurrentPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurrentPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrentPosition_descriptor_;
}

const CurrentPosition& CurrentPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

CurrentPosition* CurrentPosition::default_instance_ = NULL;

CurrentPosition* CurrentPosition::New() const {
  return new CurrentPosition;
}

void CurrentPosition::Clear() {
  country_.Clear();
  province_.Clear();
  city_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrentPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CurrentPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 country = 1;
      case 1: {
        if (tag == 8) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_country())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_country())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_country;
        if (input->ExpectTag(16)) goto parse_province;
        break;
      }

      // repeated int32 province = 2;
      case 2: {
        if (tag == 16) {
         parse_province:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_province())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_province())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_province;
        if (input->ExpectTag(24)) goto parse_city;
        break;
      }

      // repeated int32 city = 3;
      case 3: {
        if (tag == 24) {
         parse_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_city())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_city())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_city;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CurrentPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CurrentPosition)
  return false;
#undef DO_
}

void CurrentPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CurrentPosition)
  // repeated int32 country = 1;
  for (int i = 0; i < this->country_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->country(i), output);
  }

  // repeated int32 province = 2;
  for (int i = 0; i < this->province_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->province(i), output);
  }

  // repeated int32 city = 3;
  for (int i = 0; i < this->city_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->city(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CurrentPosition)
}

::google::protobuf::uint8* CurrentPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CurrentPosition)
  // repeated int32 country = 1;
  for (int i = 0; i < this->country_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->country(i), target);
  }

  // repeated int32 province = 2;
  for (int i = 0; i < this->province_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->province(i), target);
  }

  // repeated int32 city = 3;
  for (int i = 0; i < this->city_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->city(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CurrentPosition)
  return target;
}

int CurrentPosition::ByteSize() const {
  int total_size = 0;

  // repeated int32 country = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->country_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->country(i));
    }
    total_size += 1 * this->country_size() + data_size;
  }

  // repeated int32 province = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->province_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->province(i));
    }
    total_size += 1 * this->province_size() + data_size;
  }

  // repeated int32 city = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->city_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->city(i));
    }
    total_size += 1 * this->city_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrentPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrentPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrentPosition::MergeFrom(const CurrentPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  country_.MergeFrom(from.country_);
  province_.MergeFrom(from.province_);
  city_.MergeFrom(from.city_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrentPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentPosition::CopyFrom(const CurrentPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentPosition::IsInitialized() const {

  return true;
}

void CurrentPosition::Swap(CurrentPosition* other) {
  if (other != this) {
    country_.Swap(&other->country_);
    province_.Swap(&other->province_);
    city_.Swap(&other->city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrentPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrentPosition_descriptor_;
  metadata.reflection = CurrentPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExposureScene::kChannelFieldNumber;
const int ExposureScene::kAlgVersionFieldNumber;
#endif  // !_MSC_VER

ExposureScene::ExposureScene()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExposureScene)
}

void ExposureScene::InitAsDefaultInstance() {
}

ExposureScene::ExposureScene(const ExposureScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ExposureScene)
}

void ExposureScene::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  alg_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExposureScene::~ExposureScene() {
  // @@protoc_insertion_point(destructor:ExposureScene)
  SharedDtor();
}

void ExposureScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExposureScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExposureScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExposureScene_descriptor_;
}

const ExposureScene& ExposureScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

ExposureScene* ExposureScene::default_instance_ = NULL;

ExposureScene* ExposureScene::New() const {
  return new ExposureScene;
}

void ExposureScene::Clear() {
  alg_version_ = 0u;
  channel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExposureScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExposureScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes channel = 1;
      case 1: {
        if (tag == 10) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_channel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_channel;
        if (input->ExpectTag(16)) goto parse_alg_version;
        break;
      }

      // optional uint32 alg_version = 2;
      case 2: {
        if (tag == 16) {
         parse_alg_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alg_version_)));
          set_has_alg_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExposureScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExposureScene)
  return false;
#undef DO_
}

void ExposureScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExposureScene)
  // repeated bytes channel = 1;
  for (int i = 0; i < this->channel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->channel(i), output);
  }

  // optional uint32 alg_version = 2;
  if (has_alg_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->alg_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ExposureScene)
}

::google::protobuf::uint8* ExposureScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExposureScene)
  // repeated bytes channel = 1;
  for (int i = 0; i < this->channel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->channel(i), target);
  }

  // optional uint32 alg_version = 2;
  if (has_alg_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->alg_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExposureScene)
  return target;
}

int ExposureScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 alg_version = 2;
    if (has_alg_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alg_version());
    }

  }
  // repeated bytes channel = 1;
  total_size += 1 * this->channel_size();
  for (int i = 0; i < this->channel_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->channel(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExposureScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExposureScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExposureScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExposureScene::MergeFrom(const ExposureScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  channel_.MergeFrom(from.channel_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_alg_version()) {
      set_alg_version(from.alg_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExposureScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExposureScene::CopyFrom(const ExposureScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExposureScene::IsInitialized() const {

  return true;
}

void ExposureScene::Swap(ExposureScene* other) {
  if (other != this) {
    channel_.Swap(&other->channel_);
    std::swap(alg_version_, other->alg_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExposureScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExposureScene_descriptor_;
  metadata.reflection = ExposureScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TriggerConfExt::kIdFieldNumber;
const int TriggerConfExt::kConfFieldNumber;
const int TriggerConfExt::kCtrFieldNumber;
#endif  // !_MSC_VER

TriggerConfExt::TriggerConfExt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TriggerConfExt)
}

void TriggerConfExt::InitAsDefaultInstance() {
}

TriggerConfExt::TriggerConfExt(const TriggerConfExt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TriggerConfExt)
}

void TriggerConfExt::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ctr_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TriggerConfExt::~TriggerConfExt() {
  // @@protoc_insertion_point(destructor:TriggerConfExt)
  SharedDtor();
}

void TriggerConfExt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TriggerConfExt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TriggerConfExt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerConfExt_descriptor_;
}

const TriggerConfExt& TriggerConfExt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

TriggerConfExt* TriggerConfExt::default_instance_ = NULL;

TriggerConfExt* TriggerConfExt::New() const {
  return new TriggerConfExt;
}

void TriggerConfExt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TriggerConfExt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, ctr_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  conf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TriggerConfExt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TriggerConfExt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_conf;
        break;
      }

      // repeated .Conf conf = 2;
      case 2: {
        if (tag == 18) {
         parse_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_conf;
        if (input->ExpectTag(24)) goto parse_ctr;
        break;
      }

      // optional bool ctr = 3;
      case 3: {
        if (tag == 24) {
         parse_ctr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ctr_)));
          set_has_ctr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TriggerConfExt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TriggerConfExt)
  return false;
#undef DO_
}

void TriggerConfExt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TriggerConfExt)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .Conf conf = 2;
  for (int i = 0; i < this->conf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->conf(i), output);
  }

  // optional bool ctr = 3;
  if (has_ctr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ctr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TriggerConfExt)
}

::google::protobuf::uint8* TriggerConfExt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TriggerConfExt)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .Conf conf = 2;
  for (int i = 0; i < this->conf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->conf(i), target);
  }

  // optional bool ctr = 3;
  if (has_ctr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ctr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TriggerConfExt)
  return target;
}

int TriggerConfExt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bool ctr = 3;
    if (has_ctr()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Conf conf = 2;
  total_size += 1 * this->conf_size();
  for (int i = 0; i < this->conf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conf(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TriggerConfExt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TriggerConfExt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TriggerConfExt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TriggerConfExt::MergeFrom(const TriggerConfExt& from) {
  GOOGLE_CHECK_NE(&from, this);
  conf_.MergeFrom(from.conf_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ctr()) {
      set_ctr(from.ctr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TriggerConfExt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerConfExt::CopyFrom(const TriggerConfExt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerConfExt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->conf())) return false;
  return true;
}

void TriggerConfExt::Swap(TriggerConfExt* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    conf_.Swap(&other->conf_);
    std::swap(ctr_, other->ctr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TriggerConfExt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TriggerConfExt_descriptor_;
  metadata.reflection = TriggerConfExt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PolicyConf::kIdFieldNumber;
const int PolicyConf::kNameFieldNumber;
const int PolicyConf::kBaseFieldNumber;
const int PolicyConf::kRegionFieldNumber;
const int PolicyConf::kInterestFieldNumber;
const int PolicyConf::kSceneFieldNumber;
const int PolicyConf::kPositionFieldNumber;
const int PolicyConf::kExposureFieldNumber;
const int PolicyConf::kTriggersFieldNumber;
const int PolicyConf::kFiltersFieldNumber;
const int PolicyConf::kReranksFieldNumber;
const int PolicyConf::kFlagFieldNumber;
const int PolicyConf::kTriggersconfFieldNumber;
const int PolicyConf::kRankFieldNumber;
const int PolicyConf::kForNewUserFieldNumber;
const int PolicyConf::kRerankSrvFieldNumber;
const int PolicyConf::kPlayconfFieldNumber;
const int PolicyConf::kProfileFieldNumber;
#endif  // !_MSC_VER

PolicyConf::PolicyConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PolicyConf)
}

void PolicyConf::InitAsDefaultInstance() {
  base_ = const_cast< ::BaseImage*>(&::BaseImage::default_instance());
  region_ = const_cast< ::RegionImage*>(&::RegionImage::default_instance());
  interest_ = const_cast< ::InterestImage*>(&::InterestImage::default_instance());
  scene_ = const_cast< ::BaseScene*>(&::BaseScene::default_instance());
  position_ = const_cast< ::CurrentPosition*>(&::CurrentPosition::default_instance());
  exposure_ = const_cast< ::ExposureScene*>(&::ExposureScene::default_instance());
  rank_ = const_cast< ::RankConf*>(&::RankConf::default_instance());
  rerank_srv_ = const_cast< ::RerankServiceConf*>(&::RerankServiceConf::default_instance());
  profile_ = const_cast< ::ProfileConf*>(&::ProfileConf::default_instance());
}

PolicyConf::PolicyConf(const PolicyConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PolicyConf)
}

void PolicyConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_ = NULL;
  region_ = NULL;
  interest_ = NULL;
  scene_ = NULL;
  position_ = NULL;
  exposure_ = NULL;
  flag_ = false;
  rank_ = NULL;
  for_new_user_ = false;
  rerank_srv_ = NULL;
  profile_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PolicyConf::~PolicyConf() {
  // @@protoc_insertion_point(destructor:PolicyConf)
  SharedDtor();
}

void PolicyConf::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete base_;
    delete region_;
    delete interest_;
    delete scene_;
    delete position_;
    delete exposure_;
    delete rank_;
    delete rerank_srv_;
    delete profile_;
  }
}

void PolicyConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PolicyConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PolicyConf_descriptor_;
}

const PolicyConf& PolicyConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

PolicyConf* PolicyConf::default_instance_ = NULL;

PolicyConf* PolicyConf::New() const {
  return new PolicyConf;
}

void PolicyConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PolicyConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_base()) {
      if (base_ != NULL) base_->::BaseImage::Clear();
    }
    if (has_region()) {
      if (region_ != NULL) region_->::RegionImage::Clear();
    }
    if (has_interest()) {
      if (interest_ != NULL) interest_->::InterestImage::Clear();
    }
    if (has_scene()) {
      if (scene_ != NULL) scene_->::BaseScene::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::CurrentPosition::Clear();
    }
    if (has_exposure()) {
      if (exposure_ != NULL) exposure_->::ExposureScene::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 59392) {
    ZR_(flag_, for_new_user_);
    if (has_rank()) {
      if (rank_ != NULL) rank_->::RankConf::Clear();
    }
    if (has_rerank_srv()) {
      if (rerank_srv_ != NULL) rerank_srv_->::RerankServiceConf::Clear();
    }
  }
  if (has_profile()) {
    if (profile_ != NULL) profile_->::ProfileConf::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  triggers_.Clear();
  filters_.Clear();
  reranks_.Clear();
  triggersconf_.Clear();
  playconf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PolicyConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PolicyConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_base;
        break;
      }

      // optional .BaseImage base = 3;
      case 3: {
        if (tag == 26) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_region;
        break;
      }

      // optional .RegionImage region = 4;
      case 4: {
        if (tag == 34) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_interest;
        break;
      }

      // optional .InterestImage interest = 5;
      case 5: {
        if (tag == 42) {
         parse_interest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_scene;
        break;
      }

      // optional .BaseScene scene = 6;
      case 6: {
        if (tag == 50) {
         parse_scene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_position;
        break;
      }

      // optional .CurrentPosition position = 7;
      case 7: {
        if (tag == 58) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_exposure;
        break;
      }

      // optional .ExposureScene exposure = 8;
      case 8: {
        if (tag == 66) {
         parse_exposure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exposure()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_triggers;
        break;
      }

      // repeated uint32 triggers = 9;
      case 9: {
        if (tag == 72) {
         parse_triggers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_triggers())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_triggers())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_triggers;
        if (input->ExpectTag(80)) goto parse_filters;
        break;
      }

      // repeated uint32 filters = 10;
      case 10: {
        if (tag == 80) {
         parse_filters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_filters())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_filters())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_filters;
        if (input->ExpectTag(88)) goto parse_reranks;
        break;
      }

      // repeated uint32 reranks = 11;
      case 11: {
        if (tag == 88) {
         parse_reranks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_reranks())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reranks())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_reranks;
        if (input->ExpectTag(96)) goto parse_flag;
        break;
      }

      // required bool flag = 12;
      case 12: {
        if (tag == 96) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_triggersconf;
        break;
      }

      // repeated .TriggerConfExt triggersconf = 13;
      case 13: {
        if (tag == 106) {
         parse_triggersconf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triggersconf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_triggersconf;
        if (input->ExpectTag(122)) goto parse_rank;
        break;
      }

      // optional .RankConf rank = 15;
      case 15: {
        if (tag == 122) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_for_new_user;
        break;
      }

      // optional bool for_new_user = 16;
      case 16: {
        if (tag == 128) {
         parse_for_new_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &for_new_user_)));
          set_has_for_new_user();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_rerank_srv;
        break;
      }

      // optional .RerankServiceConf rerank_srv = 17;
      case 17: {
        if (tag == 138) {
         parse_rerank_srv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rerank_srv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_playconf;
        break;
      }

      // repeated .Conf playconf = 18;
      case 18: {
        if (tag == 146) {
         parse_playconf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playconf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_playconf;
        if (input->ExpectTag(154)) goto parse_profile;
        break;
      }

      // optional .ProfileConf profile = 19;
      case 19: {
        if (tag == 154) {
         parse_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PolicyConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PolicyConf)
  return false;
#undef DO_
}

void PolicyConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PolicyConf)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // optional .BaseImage base = 3;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->base(), output);
  }

  // optional .RegionImage region = 4;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->region(), output);
  }

  // optional .InterestImage interest = 5;
  if (has_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->interest(), output);
  }

  // optional .BaseScene scene = 6;
  if (has_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->scene(), output);
  }

  // optional .CurrentPosition position = 7;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->position(), output);
  }

  // optional .ExposureScene exposure = 8;
  if (has_exposure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->exposure(), output);
  }

  // repeated uint32 triggers = 9;
  for (int i = 0; i < this->triggers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->triggers(i), output);
  }

  // repeated uint32 filters = 10;
  for (int i = 0; i < this->filters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->filters(i), output);
  }

  // repeated uint32 reranks = 11;
  for (int i = 0; i < this->reranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->reranks(i), output);
  }

  // required bool flag = 12;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->flag(), output);
  }

  // repeated .TriggerConfExt triggersconf = 13;
  for (int i = 0; i < this->triggersconf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->triggersconf(i), output);
  }

  // optional .RankConf rank = 15;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->rank(), output);
  }

  // optional bool for_new_user = 16;
  if (has_for_new_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->for_new_user(), output);
  }

  // optional .RerankServiceConf rerank_srv = 17;
  if (has_rerank_srv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->rerank_srv(), output);
  }

  // repeated .Conf playconf = 18;
  for (int i = 0; i < this->playconf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->playconf(i), output);
  }

  // optional .ProfileConf profile = 19;
  if (has_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->profile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PolicyConf)
}

::google::protobuf::uint8* PolicyConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolicyConf)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional .BaseImage base = 3;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->base(), target);
  }

  // optional .RegionImage region = 4;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->region(), target);
  }

  // optional .InterestImage interest = 5;
  if (has_interest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->interest(), target);
  }

  // optional .BaseScene scene = 6;
  if (has_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->scene(), target);
  }

  // optional .CurrentPosition position = 7;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->position(), target);
  }

  // optional .ExposureScene exposure = 8;
  if (has_exposure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->exposure(), target);
  }

  // repeated uint32 triggers = 9;
  for (int i = 0; i < this->triggers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->triggers(i), target);
  }

  // repeated uint32 filters = 10;
  for (int i = 0; i < this->filters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->filters(i), target);
  }

  // repeated uint32 reranks = 11;
  for (int i = 0; i < this->reranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->reranks(i), target);
  }

  // required bool flag = 12;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->flag(), target);
  }

  // repeated .TriggerConfExt triggersconf = 13;
  for (int i = 0; i < this->triggersconf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->triggersconf(i), target);
  }

  // optional .RankConf rank = 15;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->rank(), target);
  }

  // optional bool for_new_user = 16;
  if (has_for_new_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->for_new_user(), target);
  }

  // optional .RerankServiceConf rerank_srv = 17;
  if (has_rerank_srv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->rerank_srv(), target);
  }

  // repeated .Conf playconf = 18;
  for (int i = 0; i < this->playconf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->playconf(i), target);
  }

  // optional .ProfileConf profile = 19;
  if (has_profile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->profile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolicyConf)
  return target;
}

int PolicyConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional .BaseImage base = 3;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .RegionImage region = 4;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // optional .InterestImage interest = 5;
    if (has_interest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->interest());
    }

    // optional .BaseScene scene = 6;
    if (has_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene());
    }

    // optional .CurrentPosition position = 7;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .ExposureScene exposure = 8;
    if (has_exposure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exposure());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // required bool flag = 12;
    if (has_flag()) {
      total_size += 1 + 1;
    }

    // optional .RankConf rank = 15;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank());
    }

    // optional bool for_new_user = 16;
    if (has_for_new_user()) {
      total_size += 2 + 1;
    }

    // optional .RerankServiceConf rerank_srv = 17;
    if (has_rerank_srv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rerank_srv());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional .ProfileConf profile = 19;
    if (has_profile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profile());
    }

  }
  // repeated uint32 triggers = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->triggers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->triggers(i));
    }
    total_size += 1 * this->triggers_size() + data_size;
  }

  // repeated uint32 filters = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->filters_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->filters(i));
    }
    total_size += 1 * this->filters_size() + data_size;
  }

  // repeated uint32 reranks = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->reranks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->reranks(i));
    }
    total_size += 1 * this->reranks_size() + data_size;
  }

  // repeated .TriggerConfExt triggersconf = 13;
  total_size += 1 * this->triggersconf_size();
  for (int i = 0; i < this->triggersconf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triggersconf(i));
  }

  // repeated .Conf playconf = 18;
  total_size += 2 * this->playconf_size();
  for (int i = 0; i < this->playconf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playconf(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolicyConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PolicyConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PolicyConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PolicyConf::MergeFrom(const PolicyConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  triggers_.MergeFrom(from.triggers_);
  filters_.MergeFrom(from.filters_);
  reranks_.MergeFrom(from.reranks_);
  triggersconf_.MergeFrom(from.triggersconf_);
  playconf_.MergeFrom(from.playconf_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_base()) {
      mutable_base()->::BaseImage::MergeFrom(from.base());
    }
    if (from.has_region()) {
      mutable_region()->::RegionImage::MergeFrom(from.region());
    }
    if (from.has_interest()) {
      mutable_interest()->::InterestImage::MergeFrom(from.interest());
    }
    if (from.has_scene()) {
      mutable_scene()->::BaseScene::MergeFrom(from.scene());
    }
    if (from.has_position()) {
      mutable_position()->::CurrentPosition::MergeFrom(from.position());
    }
    if (from.has_exposure()) {
      mutable_exposure()->::ExposureScene::MergeFrom(from.exposure());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_rank()) {
      mutable_rank()->::RankConf::MergeFrom(from.rank());
    }
    if (from.has_for_new_user()) {
      set_for_new_user(from.for_new_user());
    }
    if (from.has_rerank_srv()) {
      mutable_rerank_srv()->::RerankServiceConf::MergeFrom(from.rerank_srv());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_profile()) {
      mutable_profile()->::ProfileConf::MergeFrom(from.profile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PolicyConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolicyConf::CopyFrom(const PolicyConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000803) != 0x00000803) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->triggersconf())) return false;
  if (has_rank()) {
    if (!this->rank().IsInitialized()) return false;
  }
  if (has_rerank_srv()) {
    if (!this->rerank_srv().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->playconf())) return false;
  if (has_profile()) {
    if (!this->profile().IsInitialized()) return false;
  }
  return true;
}

void PolicyConf::Swap(PolicyConf* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(base_, other->base_);
    std::swap(region_, other->region_);
    std::swap(interest_, other->interest_);
    std::swap(scene_, other->scene_);
    std::swap(position_, other->position_);
    std::swap(exposure_, other->exposure_);
    triggers_.Swap(&other->triggers_);
    filters_.Swap(&other->filters_);
    reranks_.Swap(&other->reranks_);
    std::swap(flag_, other->flag_);
    triggersconf_.Swap(&other->triggersconf_);
    std::swap(rank_, other->rank_);
    std::swap(for_new_user_, other->for_new_user_);
    std::swap(rerank_srv_, other->rerank_srv_);
    playconf_.Swap(&other->playconf_);
    std::swap(profile_, other->profile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PolicyConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PolicyConf_descriptor_;
  metadata.reflection = PolicyConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PolicyConfs::kPolicysFieldNumber;
const int PolicyConfs::kFlagFieldNumber;
#endif  // !_MSC_VER

PolicyConfs::PolicyConfs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PolicyConfs)
}

void PolicyConfs::InitAsDefaultInstance() {
}

PolicyConfs::PolicyConfs(const PolicyConfs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PolicyConfs)
}

void PolicyConfs::SharedCtor() {
  _cached_size_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PolicyConfs::~PolicyConfs() {
  // @@protoc_insertion_point(destructor:PolicyConfs)
  SharedDtor();
}

void PolicyConfs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PolicyConfs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PolicyConfs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PolicyConfs_descriptor_;
}

const PolicyConfs& PolicyConfs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

PolicyConfs* PolicyConfs::default_instance_ = NULL;

PolicyConfs* PolicyConfs::New() const {
  return new PolicyConfs;
}

void PolicyConfs::Clear() {
  flag_ = false;
  policys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PolicyConfs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PolicyConfs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PolicyConf policys = 1;
      case 1: {
        if (tag == 10) {
         parse_policys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_policys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_policys;
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required bool flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PolicyConfs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PolicyConfs)
  return false;
#undef DO_
}

void PolicyConfs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PolicyConfs)
  // repeated .PolicyConf policys = 1;
  for (int i = 0; i < this->policys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->policys(i), output);
  }

  // required bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PolicyConfs)
}

::google::protobuf::uint8* PolicyConfs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolicyConfs)
  // repeated .PolicyConf policys = 1;
  for (int i = 0; i < this->policys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->policys(i), target);
  }

  // required bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolicyConfs)
  return target;
}

int PolicyConfs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  // repeated .PolicyConf policys = 1;
  total_size += 1 * this->policys_size();
  for (int i = 0; i < this->policys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->policys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolicyConfs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PolicyConfs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PolicyConfs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PolicyConfs::MergeFrom(const PolicyConfs& from) {
  GOOGLE_CHECK_NE(&from, this);
  policys_.MergeFrom(from.policys_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PolicyConfs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolicyConfs::CopyFrom(const PolicyConfs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyConfs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->policys())) return false;
  return true;
}

void PolicyConfs::Swap(PolicyConfs* other) {
  if (other != this) {
    policys_.Swap(&other->policys_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PolicyConfs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PolicyConfs_descriptor_;
  metadata.reflection = PolicyConfs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WhiteListConf::kIdFieldNumber;
const int WhiteListConf::kNameFieldNumber;
const int WhiteListConf::kWlfilePathFieldNumber;
const int WhiteListConf::kPolicysFieldNumber;
const int WhiteListConf::kFlagFieldNumber;
#endif  // !_MSC_VER

WhiteListConf::WhiteListConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WhiteListConf)
}

void WhiteListConf::InitAsDefaultInstance() {
}

WhiteListConf::WhiteListConf(const WhiteListConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WhiteListConf)
}

void WhiteListConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wlfile_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhiteListConf::~WhiteListConf() {
  // @@protoc_insertion_point(destructor:WhiteListConf)
  SharedDtor();
}

void WhiteListConf::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (wlfile_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wlfile_path_;
  }
  if (this != default_instance_) {
  }
}

void WhiteListConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhiteListConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhiteListConf_descriptor_;
}

const WhiteListConf& WhiteListConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_2fPolicy_2eproto();
  return *default_instance_;
}

WhiteListConf* WhiteListConf::default_instance_ = NULL;

WhiteListConf* WhiteListConf::New() const {
  return new WhiteListConf;
}

void WhiteListConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WhiteListConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(id_, flag_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_wlfile_path()) {
      if (wlfile_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wlfile_path_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  policys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WhiteListConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WhiteListConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wlfile_path;
        break;
      }

      // required bytes wlfile_path = 3;
      case 3: {
        if (tag == 26) {
         parse_wlfile_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wlfile_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_policys;
        break;
      }

      // repeated uint32 policys = 4;
      case 4: {
        if (tag == 32) {
         parse_policys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_policys())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_policys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_policys;
        if (input->ExpectTag(40)) goto parse_flag;
        break;
      }

      // required bool flag = 5;
      case 5: {
        if (tag == 40) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WhiteListConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WhiteListConf)
  return false;
#undef DO_
}

void WhiteListConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WhiteListConf)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required bytes wlfile_path = 3;
  if (has_wlfile_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->wlfile_path(), output);
  }

  // repeated uint32 policys = 4;
  for (int i = 0; i < this->policys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->policys(i), output);
  }

  // required bool flag = 5;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WhiteListConf)
}

::google::protobuf::uint8* WhiteListConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WhiteListConf)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required bytes wlfile_path = 3;
  if (has_wlfile_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->wlfile_path(), target);
  }

  // repeated uint32 policys = 4;
  for (int i = 0; i < this->policys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->policys(i), target);
  }

  // required bool flag = 5;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WhiteListConf)
  return target;
}

int WhiteListConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes wlfile_path = 3;
    if (has_wlfile_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wlfile_path());
    }

    // required bool flag = 5;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 policys = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->policys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->policys(i));
    }
    total_size += 1 * this->policys_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhiteListConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WhiteListConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WhiteListConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WhiteListConf::MergeFrom(const WhiteListConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  policys_.MergeFrom(from.policys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_wlfile_path()) {
      set_wlfile_path(from.wlfile_path());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WhiteListConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhiteListConf::CopyFrom(const WhiteListConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhiteListConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void WhiteListConf::Swap(WhiteListConf* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(wlfile_path_, other->wlfile_path_);
    policys_.Swap(&other->policys_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WhiteListConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhiteListConf_descriptor_;
  metadata.reflection = WhiteListConf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
