// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/Policy.proto

#ifndef PROTOBUF_Proto_2fPolicy_2eproto__INCLUDED
#define PROTOBUF_Proto_2fPolicy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

class Conf;
class TriggerConf;
class TriggerConfs;
class FilterConf;
class FilterConfs;
class RerankConf;
class RerankConfs;
class RankConf;
class ProfileConf;
class RerankServiceConf;
class ReloadScript;
class Range;
class BaseImage;
class RegionImage;
class InterestImage;
class BaseScene;
class CurrentPosition;
class ExposureScene;
class TriggerConfExt;
class PolicyConf;
class PolicyConfs;
class WhiteListConf;

// ===================================================================

class Conf : public ::google::protobuf::Message {
 public:
  Conf();
  virtual ~Conf();

  Conf(const Conf& from);

  inline Conf& operator=(const Conf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Conf& default_instance();

  void Swap(Conf* other);

  // implements Message ----------------------------------------------

  Conf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Conf& from);
  void MergeFrom(const Conf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Conf)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static Conf* default_instance_;
};
// -------------------------------------------------------------------

class TriggerConf : public ::google::protobuf::Message {
 public:
  TriggerConf();
  virtual ~TriggerConf();

  TriggerConf(const TriggerConf& from);

  inline TriggerConf& operator=(const TriggerConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TriggerConf& default_instance();

  void Swap(TriggerConf* other);

  // implements Message ----------------------------------------------

  TriggerConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TriggerConf& from);
  void MergeFrom(const TriggerConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes host_name = 3;
  inline bool has_host_name() const;
  inline void clear_host_name();
  static const int kHostNameFieldNumber = 3;
  inline const ::std::string& host_name() const;
  inline void set_host_name(const ::std::string& value);
  inline void set_host_name(const char* value);
  inline void set_host_name(const void* value, size_t size);
  inline ::std::string* mutable_host_name();
  inline ::std::string* release_host_name();
  inline void set_allocated_host_name(::std::string* host_name);

  // required bytes api = 4;
  inline bool has_api() const;
  inline void clear_api();
  static const int kApiFieldNumber = 4;
  inline const ::std::string& api() const;
  inline void set_api(const ::std::string& value);
  inline void set_api(const char* value);
  inline void set_api(const void* value, size_t size);
  inline ::std::string* mutable_api();
  inline ::std::string* release_api();
  inline void set_allocated_api(::std::string* api);

  // repeated .Conf conf = 5;
  inline int conf_size() const;
  inline void clear_conf();
  static const int kConfFieldNumber = 5;
  inline const ::Conf& conf(int index) const;
  inline ::Conf* mutable_conf(int index);
  inline ::Conf* add_conf();
  inline const ::google::protobuf::RepeatedPtrField< ::Conf >&
      conf() const;
  inline ::google::protobuf::RepeatedPtrField< ::Conf >*
      mutable_conf();

  // @@protoc_insertion_point(class_scope:TriggerConf)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_host_name();
  inline void clear_has_host_name();
  inline void set_has_api();
  inline void clear_has_api();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* host_name_;
  ::std::string* api_;
  ::google::protobuf::RepeatedPtrField< ::Conf > conf_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static TriggerConf* default_instance_;
};
// -------------------------------------------------------------------

class TriggerConfs : public ::google::protobuf::Message {
 public:
  TriggerConfs();
  virtual ~TriggerConfs();

  TriggerConfs(const TriggerConfs& from);

  inline TriggerConfs& operator=(const TriggerConfs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TriggerConfs& default_instance();

  void Swap(TriggerConfs* other);

  // implements Message ----------------------------------------------

  TriggerConfs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TriggerConfs& from);
  void MergeFrom(const TriggerConfs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TriggerConf triggers = 1;
  inline int triggers_size() const;
  inline void clear_triggers();
  static const int kTriggersFieldNumber = 1;
  inline const ::TriggerConf& triggers(int index) const;
  inline ::TriggerConf* mutable_triggers(int index);
  inline ::TriggerConf* add_triggers();
  inline const ::google::protobuf::RepeatedPtrField< ::TriggerConf >&
      triggers() const;
  inline ::google::protobuf::RepeatedPtrField< ::TriggerConf >*
      mutable_triggers();

  // required bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);

  // @@protoc_insertion_point(class_scope:TriggerConfs)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TriggerConf > triggers_;
  bool flag_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static TriggerConfs* default_instance_;
};
// -------------------------------------------------------------------

class FilterConf : public ::google::protobuf::Message {
 public:
  FilterConf();
  virtual ~FilterConf();

  FilterConf(const FilterConf& from);

  inline FilterConf& operator=(const FilterConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FilterConf& default_instance();

  void Swap(FilterConf* other);

  // implements Message ----------------------------------------------

  FilterConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilterConf& from);
  void MergeFrom(const FilterConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes file_name = 3;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const void* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:FilterConf)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* file_name_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static FilterConf* default_instance_;
};
// -------------------------------------------------------------------

class FilterConfs : public ::google::protobuf::Message {
 public:
  FilterConfs();
  virtual ~FilterConfs();

  FilterConfs(const FilterConfs& from);

  inline FilterConfs& operator=(const FilterConfs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FilterConfs& default_instance();

  void Swap(FilterConfs* other);

  // implements Message ----------------------------------------------

  FilterConfs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilterConfs& from);
  void MergeFrom(const FilterConfs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FilterConf filters = 1;
  inline int filters_size() const;
  inline void clear_filters();
  static const int kFiltersFieldNumber = 1;
  inline const ::FilterConf& filters(int index) const;
  inline ::FilterConf* mutable_filters(int index);
  inline ::FilterConf* add_filters();
  inline const ::google::protobuf::RepeatedPtrField< ::FilterConf >&
      filters() const;
  inline ::google::protobuf::RepeatedPtrField< ::FilterConf >*
      mutable_filters();

  // required bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);

  // @@protoc_insertion_point(class_scope:FilterConfs)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FilterConf > filters_;
  bool flag_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static FilterConfs* default_instance_;
};
// -------------------------------------------------------------------

class RerankConf : public ::google::protobuf::Message {
 public:
  RerankConf();
  virtual ~RerankConf();

  RerankConf(const RerankConf& from);

  inline RerankConf& operator=(const RerankConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RerankConf& default_instance();

  void Swap(RerankConf* other);

  // implements Message ----------------------------------------------

  RerankConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RerankConf& from);
  void MergeFrom(const RerankConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes file_name = 3;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const void* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:RerankConf)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* file_name_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static RerankConf* default_instance_;
};
// -------------------------------------------------------------------

class RerankConfs : public ::google::protobuf::Message {
 public:
  RerankConfs();
  virtual ~RerankConfs();

  RerankConfs(const RerankConfs& from);

  inline RerankConfs& operator=(const RerankConfs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RerankConfs& default_instance();

  void Swap(RerankConfs* other);

  // implements Message ----------------------------------------------

  RerankConfs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RerankConfs& from);
  void MergeFrom(const RerankConfs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RerankConf reranks = 1;
  inline int reranks_size() const;
  inline void clear_reranks();
  static const int kReranksFieldNumber = 1;
  inline const ::RerankConf& reranks(int index) const;
  inline ::RerankConf* mutable_reranks(int index);
  inline ::RerankConf* add_reranks();
  inline const ::google::protobuf::RepeatedPtrField< ::RerankConf >&
      reranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::RerankConf >*
      mutable_reranks();

  // required bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);

  // @@protoc_insertion_point(class_scope:RerankConfs)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RerankConf > reranks_;
  bool flag_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static RerankConfs* default_instance_;
};
// -------------------------------------------------------------------

class RankConf : public ::google::protobuf::Message {
 public:
  RankConf();
  virtual ~RankConf();

  RankConf(const RankConf& from);

  inline RankConf& operator=(const RankConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankConf& default_instance();

  void Swap(RankConf* other);

  // implements Message ----------------------------------------------

  RankConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankConf& from);
  void MergeFrom(const RankConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes host_name = 1;
  inline bool has_host_name() const;
  inline void clear_host_name();
  static const int kHostNameFieldNumber = 1;
  inline const ::std::string& host_name() const;
  inline void set_host_name(const ::std::string& value);
  inline void set_host_name(const char* value);
  inline void set_host_name(const void* value, size_t size);
  inline ::std::string* mutable_host_name();
  inline ::std::string* release_host_name();
  inline void set_allocated_host_name(::std::string* host_name);

  // required bytes api = 2;
  inline bool has_api() const;
  inline void clear_api();
  static const int kApiFieldNumber = 2;
  inline const ::std::string& api() const;
  inline void set_api(const ::std::string& value);
  inline void set_api(const char* value);
  inline void set_api(const void* value, size_t size);
  inline ::std::string* mutable_api();
  inline ::std::string* release_api();
  inline void set_allocated_api(::std::string* api);

  // repeated .Conf conf = 3;
  inline int conf_size() const;
  inline void clear_conf();
  static const int kConfFieldNumber = 3;
  inline const ::Conf& conf(int index) const;
  inline ::Conf* mutable_conf(int index);
  inline ::Conf* add_conf();
  inline const ::google::protobuf::RepeatedPtrField< ::Conf >&
      conf() const;
  inline ::google::protobuf::RepeatedPtrField< ::Conf >*
      mutable_conf();

  // @@protoc_insertion_point(class_scope:RankConf)
 private:
  inline void set_has_host_name();
  inline void clear_has_host_name();
  inline void set_has_api();
  inline void clear_has_api();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* host_name_;
  ::std::string* api_;
  ::google::protobuf::RepeatedPtrField< ::Conf > conf_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static RankConf* default_instance_;
};
// -------------------------------------------------------------------

class ProfileConf : public ::google::protobuf::Message {
 public:
  ProfileConf();
  virtual ~ProfileConf();

  ProfileConf(const ProfileConf& from);

  inline ProfileConf& operator=(const ProfileConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfileConf& default_instance();

  void Swap(ProfileConf* other);

  // implements Message ----------------------------------------------

  ProfileConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProfileConf& from);
  void MergeFrom(const ProfileConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes host_name = 1;
  inline bool has_host_name() const;
  inline void clear_host_name();
  static const int kHostNameFieldNumber = 1;
  inline const ::std::string& host_name() const;
  inline void set_host_name(const ::std::string& value);
  inline void set_host_name(const char* value);
  inline void set_host_name(const void* value, size_t size);
  inline ::std::string* mutable_host_name();
  inline ::std::string* release_host_name();
  inline void set_allocated_host_name(::std::string* host_name);

  // required bytes api = 2;
  inline bool has_api() const;
  inline void clear_api();
  static const int kApiFieldNumber = 2;
  inline const ::std::string& api() const;
  inline void set_api(const ::std::string& value);
  inline void set_api(const char* value);
  inline void set_api(const void* value, size_t size);
  inline ::std::string* mutable_api();
  inline ::std::string* release_api();
  inline void set_allocated_api(::std::string* api);

  // repeated .Conf conf = 3;
  inline int conf_size() const;
  inline void clear_conf();
  static const int kConfFieldNumber = 3;
  inline const ::Conf& conf(int index) const;
  inline ::Conf* mutable_conf(int index);
  inline ::Conf* add_conf();
  inline const ::google::protobuf::RepeatedPtrField< ::Conf >&
      conf() const;
  inline ::google::protobuf::RepeatedPtrField< ::Conf >*
      mutable_conf();

  // @@protoc_insertion_point(class_scope:ProfileConf)
 private:
  inline void set_has_host_name();
  inline void clear_has_host_name();
  inline void set_has_api();
  inline void clear_has_api();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* host_name_;
  ::std::string* api_;
  ::google::protobuf::RepeatedPtrField< ::Conf > conf_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static ProfileConf* default_instance_;
};
// -------------------------------------------------------------------

class RerankServiceConf : public ::google::protobuf::Message {
 public:
  RerankServiceConf();
  virtual ~RerankServiceConf();

  RerankServiceConf(const RerankServiceConf& from);

  inline RerankServiceConf& operator=(const RerankServiceConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RerankServiceConf& default_instance();

  void Swap(RerankServiceConf* other);

  // implements Message ----------------------------------------------

  RerankServiceConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RerankServiceConf& from);
  void MergeFrom(const RerankServiceConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes host_name = 1;
  inline bool has_host_name() const;
  inline void clear_host_name();
  static const int kHostNameFieldNumber = 1;
  inline const ::std::string& host_name() const;
  inline void set_host_name(const ::std::string& value);
  inline void set_host_name(const char* value);
  inline void set_host_name(const void* value, size_t size);
  inline ::std::string* mutable_host_name();
  inline ::std::string* release_host_name();
  inline void set_allocated_host_name(::std::string* host_name);

  // required bytes api = 2;
  inline bool has_api() const;
  inline void clear_api();
  static const int kApiFieldNumber = 2;
  inline const ::std::string& api() const;
  inline void set_api(const ::std::string& value);
  inline void set_api(const char* value);
  inline void set_api(const void* value, size_t size);
  inline ::std::string* mutable_api();
  inline ::std::string* release_api();
  inline void set_allocated_api(::std::string* api);

  // repeated .Conf conf = 3;
  inline int conf_size() const;
  inline void clear_conf();
  static const int kConfFieldNumber = 3;
  inline const ::Conf& conf(int index) const;
  inline ::Conf* mutable_conf(int index);
  inline ::Conf* add_conf();
  inline const ::google::protobuf::RepeatedPtrField< ::Conf >&
      conf() const;
  inline ::google::protobuf::RepeatedPtrField< ::Conf >*
      mutable_conf();

  // @@protoc_insertion_point(class_scope:RerankServiceConf)
 private:
  inline void set_has_host_name();
  inline void clear_has_host_name();
  inline void set_has_api();
  inline void clear_has_api();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* host_name_;
  ::std::string* api_;
  ::google::protobuf::RepeatedPtrField< ::Conf > conf_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static RerankServiceConf* default_instance_;
};
// -------------------------------------------------------------------

class ReloadScript : public ::google::protobuf::Message {
 public:
  ReloadScript();
  virtual ~ReloadScript();

  ReloadScript(const ReloadScript& from);

  inline ReloadScript& operator=(const ReloadScript& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReloadScript& default_instance();

  void Swap(ReloadScript* other);

  // implements Message ----------------------------------------------

  ReloadScript* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReloadScript& from);
  void MergeFrom(const ReloadScript& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes file_name = 1;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const void* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:ReloadScript)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* file_name_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static ReloadScript* default_instance_;
};
// -------------------------------------------------------------------

class Range : public ::google::protobuf::Message {
 public:
  Range();
  virtual ~Range();

  Range(const Range& from);

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Range& default_instance();

  void Swap(Range* other);

  // implements Message ----------------------------------------------

  Range* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 min = 1;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 1;
  inline ::google::protobuf::int32 min() const;
  inline void set_min(::google::protobuf::int32 value);

  // required int32 max = 2;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 2;
  inline ::google::protobuf::int32 max() const;
  inline void set_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Range)
 private:
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 min_;
  ::google::protobuf::int32 max_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static Range* default_instance_;
};
// -------------------------------------------------------------------

class BaseImage : public ::google::protobuf::Message {
 public:
  BaseImage();
  virtual ~BaseImage();

  BaseImage(const BaseImage& from);

  inline BaseImage& operator=(const BaseImage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseImage& default_instance();

  void Swap(BaseImage* other);

  // implements Message ----------------------------------------------

  BaseImage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseImage& from);
  void MergeFrom(const BaseImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 sex = 1;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 1;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // repeated .Range age = 2;
  inline int age_size() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 2;
  inline const ::Range& age(int index) const;
  inline ::Range* mutable_age(int index);
  inline ::Range* add_age();
  inline const ::google::protobuf::RepeatedPtrField< ::Range >&
      age() const;
  inline ::google::protobuf::RepeatedPtrField< ::Range >*
      mutable_age();

  // repeated bytes edu = 3;
  inline int edu_size() const;
  inline void clear_edu();
  static const int kEduFieldNumber = 3;
  inline const ::std::string& edu(int index) const;
  inline ::std::string* mutable_edu(int index);
  inline void set_edu(int index, const ::std::string& value);
  inline void set_edu(int index, const char* value);
  inline void set_edu(int index, const void* value, size_t size);
  inline ::std::string* add_edu();
  inline void add_edu(const ::std::string& value);
  inline void add_edu(const char* value);
  inline void add_edu(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& edu() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_edu();

  // repeated bytes job = 4;
  inline int job_size() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline const ::std::string& job(int index) const;
  inline ::std::string* mutable_job(int index);
  inline void set_job(int index, const ::std::string& value);
  inline void set_job(int index, const char* value);
  inline void set_job(int index, const void* value, size_t size);
  inline ::std::string* add_job();
  inline void add_job(const ::std::string& value);
  inline void add_job(const char* value);
  inline void add_job(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& job() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_job();

  // @@protoc_insertion_point(class_scope:BaseImage)
 private:
  inline void set_has_sex();
  inline void clear_has_sex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Range > age_;
  ::google::protobuf::RepeatedPtrField< ::std::string> edu_;
  ::google::protobuf::RepeatedPtrField< ::std::string> job_;
  ::google::protobuf::int32 sex_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static BaseImage* default_instance_;
};
// -------------------------------------------------------------------

class RegionImage : public ::google::protobuf::Message {
 public:
  RegionImage();
  virtual ~RegionImage();

  RegionImage(const RegionImage& from);

  inline RegionImage& operator=(const RegionImage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionImage& default_instance();

  void Swap(RegionImage* other);

  // implements Message ----------------------------------------------

  RegionImage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionImage& from);
  void MergeFrom(const RegionImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 country = 1;
  inline int country_size() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline ::google::protobuf::int32 country(int index) const;
  inline void set_country(int index, ::google::protobuf::int32 value);
  inline void add_country(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      country() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_country();

  // repeated int32 province = 2;
  inline int province_size() const;
  inline void clear_province();
  static const int kProvinceFieldNumber = 2;
  inline ::google::protobuf::int32 province(int index) const;
  inline void set_province(int index, ::google::protobuf::int32 value);
  inline void add_province(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      province() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_province();

  // repeated int32 city = 3;
  inline int city_size() const;
  inline void clear_city();
  static const int kCityFieldNumber = 3;
  inline ::google::protobuf::int32 city(int index) const;
  inline void set_city(int index, ::google::protobuf::int32 value);
  inline void add_city(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      city() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_city();

  // @@protoc_insertion_point(class_scope:RegionImage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > country_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > province_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > city_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static RegionImage* default_instance_;
};
// -------------------------------------------------------------------

class InterestImage : public ::google::protobuf::Message {
 public:
  InterestImage();
  virtual ~InterestImage();

  InterestImage(const InterestImage& from);

  inline InterestImage& operator=(const InterestImage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InterestImage& default_instance();

  void Swap(InterestImage* other);

  // implements Message ----------------------------------------------

  InterestImage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InterestImage& from);
  void MergeFrom(const InterestImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 first_level = 1;
  inline int first_level_size() const;
  inline void clear_first_level();
  static const int kFirstLevelFieldNumber = 1;
  inline ::google::protobuf::int32 first_level(int index) const;
  inline void set_first_level(int index, ::google::protobuf::int32 value);
  inline void add_first_level(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      first_level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_first_level();

  // repeated int32 second_level = 2;
  inline int second_level_size() const;
  inline void clear_second_level();
  static const int kSecondLevelFieldNumber = 2;
  inline ::google::protobuf::int32 second_level(int index) const;
  inline void set_second_level(int index, ::google::protobuf::int32 value);
  inline void add_second_level(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      second_level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_second_level();

  // repeated int32 third_level = 3;
  inline int third_level_size() const;
  inline void clear_third_level();
  static const int kThirdLevelFieldNumber = 3;
  inline ::google::protobuf::int32 third_level(int index) const;
  inline void set_third_level(int index, ::google::protobuf::int32 value);
  inline void add_third_level(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      third_level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_third_level();

  // @@protoc_insertion_point(class_scope:InterestImage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > first_level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > second_level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > third_level_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static InterestImage* default_instance_;
};
// -------------------------------------------------------------------

class BaseScene : public ::google::protobuf::Message {
 public:
  BaseScene();
  virtual ~BaseScene();

  BaseScene(const BaseScene& from);

  inline BaseScene& operator=(const BaseScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseScene& default_instance();

  void Swap(BaseScene* other);

  // implements Message ----------------------------------------------

  BaseScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseScene& from);
  void MergeFrom(const BaseScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes os = 1;
  inline int os_size() const;
  inline void clear_os();
  static const int kOsFieldNumber = 1;
  inline const ::std::string& os(int index) const;
  inline ::std::string* mutable_os(int index);
  inline void set_os(int index, const ::std::string& value);
  inline void set_os(int index, const char* value);
  inline void set_os(int index, const void* value, size_t size);
  inline ::std::string* add_os();
  inline void add_os(const ::std::string& value);
  inline void add_os(const char* value);
  inline void add_os(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& os() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_os();

  // repeated bytes net = 2;
  inline int net_size() const;
  inline void clear_net();
  static const int kNetFieldNumber = 2;
  inline const ::std::string& net(int index) const;
  inline ::std::string* mutable_net(int index);
  inline void set_net(int index, const ::std::string& value);
  inline void set_net(int index, const char* value);
  inline void set_net(int index, const void* value, size_t size);
  inline ::std::string* add_net();
  inline void add_net(const ::std::string& value);
  inline void add_net(const char* value);
  inline void add_net(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& net() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_net();

  // repeated bytes platform = 3;
  inline int platform_size() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 3;
  inline const ::std::string& platform(int index) const;
  inline ::std::string* mutable_platform(int index);
  inline void set_platform(int index, const ::std::string& value);
  inline void set_platform(int index, const char* value);
  inline void set_platform(int index, const void* value, size_t size);
  inline ::std::string* add_platform();
  inline void add_platform(const ::std::string& value);
  inline void add_platform(const char* value);
  inline void add_platform(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& platform() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_platform();

  // @@protoc_insertion_point(class_scope:BaseScene)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> os_;
  ::google::protobuf::RepeatedPtrField< ::std::string> net_;
  ::google::protobuf::RepeatedPtrField< ::std::string> platform_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static BaseScene* default_instance_;
};
// -------------------------------------------------------------------

class CurrentPosition : public ::google::protobuf::Message {
 public:
  CurrentPosition();
  virtual ~CurrentPosition();

  CurrentPosition(const CurrentPosition& from);

  inline CurrentPosition& operator=(const CurrentPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CurrentPosition& default_instance();

  void Swap(CurrentPosition* other);

  // implements Message ----------------------------------------------

  CurrentPosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CurrentPosition& from);
  void MergeFrom(const CurrentPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 country = 1;
  inline int country_size() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline ::google::protobuf::int32 country(int index) const;
  inline void set_country(int index, ::google::protobuf::int32 value);
  inline void add_country(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      country() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_country();

  // repeated int32 province = 2;
  inline int province_size() const;
  inline void clear_province();
  static const int kProvinceFieldNumber = 2;
  inline ::google::protobuf::int32 province(int index) const;
  inline void set_province(int index, ::google::protobuf::int32 value);
  inline void add_province(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      province() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_province();

  // repeated int32 city = 3;
  inline int city_size() const;
  inline void clear_city();
  static const int kCityFieldNumber = 3;
  inline ::google::protobuf::int32 city(int index) const;
  inline void set_city(int index, ::google::protobuf::int32 value);
  inline void add_city(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      city() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_city();

  // @@protoc_insertion_point(class_scope:CurrentPosition)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > country_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > province_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > city_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static CurrentPosition* default_instance_;
};
// -------------------------------------------------------------------

class ExposureScene : public ::google::protobuf::Message {
 public:
  ExposureScene();
  virtual ~ExposureScene();

  ExposureScene(const ExposureScene& from);

  inline ExposureScene& operator=(const ExposureScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExposureScene& default_instance();

  void Swap(ExposureScene* other);

  // implements Message ----------------------------------------------

  ExposureScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExposureScene& from);
  void MergeFrom(const ExposureScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes channel = 1;
  inline int channel_size() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline const ::std::string& channel(int index) const;
  inline ::std::string* mutable_channel(int index);
  inline void set_channel(int index, const ::std::string& value);
  inline void set_channel(int index, const char* value);
  inline void set_channel(int index, const void* value, size_t size);
  inline ::std::string* add_channel();
  inline void add_channel(const ::std::string& value);
  inline void add_channel(const char* value);
  inline void add_channel(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& channel() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_channel();

  // optional uint32 alg_version = 2;
  inline bool has_alg_version() const;
  inline void clear_alg_version();
  static const int kAlgVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 alg_version() const;
  inline void set_alg_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ExposureScene)
 private:
  inline void set_has_alg_version();
  inline void clear_has_alg_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> channel_;
  ::google::protobuf::uint32 alg_version_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static ExposureScene* default_instance_;
};
// -------------------------------------------------------------------

class TriggerConfExt : public ::google::protobuf::Message {
 public:
  TriggerConfExt();
  virtual ~TriggerConfExt();

  TriggerConfExt(const TriggerConfExt& from);

  inline TriggerConfExt& operator=(const TriggerConfExt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TriggerConfExt& default_instance();

  void Swap(TriggerConfExt* other);

  // implements Message ----------------------------------------------

  TriggerConfExt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TriggerConfExt& from);
  void MergeFrom(const TriggerConfExt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated .Conf conf = 2;
  inline int conf_size() const;
  inline void clear_conf();
  static const int kConfFieldNumber = 2;
  inline const ::Conf& conf(int index) const;
  inline ::Conf* mutable_conf(int index);
  inline ::Conf* add_conf();
  inline const ::google::protobuf::RepeatedPtrField< ::Conf >&
      conf() const;
  inline ::google::protobuf::RepeatedPtrField< ::Conf >*
      mutable_conf();

  // optional bool ctr = 3;
  inline bool has_ctr() const;
  inline void clear_ctr();
  static const int kCtrFieldNumber = 3;
  inline bool ctr() const;
  inline void set_ctr(bool value);

  // @@protoc_insertion_point(class_scope:TriggerConfExt)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ctr();
  inline void clear_has_ctr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Conf > conf_;
  ::google::protobuf::uint32 id_;
  bool ctr_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static TriggerConfExt* default_instance_;
};
// -------------------------------------------------------------------

class PolicyConf : public ::google::protobuf::Message {
 public:
  PolicyConf();
  virtual ~PolicyConf();

  PolicyConf(const PolicyConf& from);

  inline PolicyConf& operator=(const PolicyConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PolicyConf& default_instance();

  void Swap(PolicyConf* other);

  // implements Message ----------------------------------------------

  PolicyConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PolicyConf& from);
  void MergeFrom(const PolicyConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .BaseImage base = 3;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 3;
  inline const ::BaseImage& base() const;
  inline ::BaseImage* mutable_base();
  inline ::BaseImage* release_base();
  inline void set_allocated_base(::BaseImage* base);

  // optional .RegionImage region = 4;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 4;
  inline const ::RegionImage& region() const;
  inline ::RegionImage* mutable_region();
  inline ::RegionImage* release_region();
  inline void set_allocated_region(::RegionImage* region);

  // optional .InterestImage interest = 5;
  inline bool has_interest() const;
  inline void clear_interest();
  static const int kInterestFieldNumber = 5;
  inline const ::InterestImage& interest() const;
  inline ::InterestImage* mutable_interest();
  inline ::InterestImage* release_interest();
  inline void set_allocated_interest(::InterestImage* interest);

  // optional .BaseScene scene = 6;
  inline bool has_scene() const;
  inline void clear_scene();
  static const int kSceneFieldNumber = 6;
  inline const ::BaseScene& scene() const;
  inline ::BaseScene* mutable_scene();
  inline ::BaseScene* release_scene();
  inline void set_allocated_scene(::BaseScene* scene);

  // optional .CurrentPosition position = 7;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 7;
  inline const ::CurrentPosition& position() const;
  inline ::CurrentPosition* mutable_position();
  inline ::CurrentPosition* release_position();
  inline void set_allocated_position(::CurrentPosition* position);

  // optional .ExposureScene exposure = 8;
  inline bool has_exposure() const;
  inline void clear_exposure();
  static const int kExposureFieldNumber = 8;
  inline const ::ExposureScene& exposure() const;
  inline ::ExposureScene* mutable_exposure();
  inline ::ExposureScene* release_exposure();
  inline void set_allocated_exposure(::ExposureScene* exposure);

  // repeated uint32 triggers = 9;
  inline int triggers_size() const;
  inline void clear_triggers();
  static const int kTriggersFieldNumber = 9;
  inline ::google::protobuf::uint32 triggers(int index) const;
  inline void set_triggers(int index, ::google::protobuf::uint32 value);
  inline void add_triggers(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      triggers() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_triggers();

  // repeated uint32 filters = 10;
  inline int filters_size() const;
  inline void clear_filters();
  static const int kFiltersFieldNumber = 10;
  inline ::google::protobuf::uint32 filters(int index) const;
  inline void set_filters(int index, ::google::protobuf::uint32 value);
  inline void add_filters(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      filters() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_filters();

  // repeated uint32 reranks = 11;
  inline int reranks_size() const;
  inline void clear_reranks();
  static const int kReranksFieldNumber = 11;
  inline ::google::protobuf::uint32 reranks(int index) const;
  inline void set_reranks(int index, ::google::protobuf::uint32 value);
  inline void add_reranks(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      reranks() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_reranks();

  // required bool flag = 12;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 12;
  inline bool flag() const;
  inline void set_flag(bool value);

  // repeated .TriggerConfExt triggersconf = 13;
  inline int triggersconf_size() const;
  inline void clear_triggersconf();
  static const int kTriggersconfFieldNumber = 13;
  inline const ::TriggerConfExt& triggersconf(int index) const;
  inline ::TriggerConfExt* mutable_triggersconf(int index);
  inline ::TriggerConfExt* add_triggersconf();
  inline const ::google::protobuf::RepeatedPtrField< ::TriggerConfExt >&
      triggersconf() const;
  inline ::google::protobuf::RepeatedPtrField< ::TriggerConfExt >*
      mutable_triggersconf();

  // optional .RankConf rank = 15;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 15;
  inline const ::RankConf& rank() const;
  inline ::RankConf* mutable_rank();
  inline ::RankConf* release_rank();
  inline void set_allocated_rank(::RankConf* rank);

  // optional bool for_new_user = 16;
  inline bool has_for_new_user() const;
  inline void clear_for_new_user();
  static const int kForNewUserFieldNumber = 16;
  inline bool for_new_user() const;
  inline void set_for_new_user(bool value);

  // optional .RerankServiceConf rerank_srv = 17;
  inline bool has_rerank_srv() const;
  inline void clear_rerank_srv();
  static const int kRerankSrvFieldNumber = 17;
  inline const ::RerankServiceConf& rerank_srv() const;
  inline ::RerankServiceConf* mutable_rerank_srv();
  inline ::RerankServiceConf* release_rerank_srv();
  inline void set_allocated_rerank_srv(::RerankServiceConf* rerank_srv);

  // repeated .Conf playconf = 18;
  inline int playconf_size() const;
  inline void clear_playconf();
  static const int kPlayconfFieldNumber = 18;
  inline const ::Conf& playconf(int index) const;
  inline ::Conf* mutable_playconf(int index);
  inline ::Conf* add_playconf();
  inline const ::google::protobuf::RepeatedPtrField< ::Conf >&
      playconf() const;
  inline ::google::protobuf::RepeatedPtrField< ::Conf >*
      mutable_playconf();

  // optional .ProfileConf profile = 19;
  inline bool has_profile() const;
  inline void clear_profile();
  static const int kProfileFieldNumber = 19;
  inline const ::ProfileConf& profile() const;
  inline ::ProfileConf* mutable_profile();
  inline ::ProfileConf* release_profile();
  inline void set_allocated_profile(::ProfileConf* profile);

  // @@protoc_insertion_point(class_scope:PolicyConf)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_interest();
  inline void clear_has_interest();
  inline void set_has_scene();
  inline void clear_has_scene();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_exposure();
  inline void clear_has_exposure();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_for_new_user();
  inline void clear_has_for_new_user();
  inline void set_has_rerank_srv();
  inline void clear_has_rerank_srv();
  inline void set_has_profile();
  inline void clear_has_profile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::BaseImage* base_;
  ::RegionImage* region_;
  ::InterestImage* interest_;
  ::BaseScene* scene_;
  ::CurrentPosition* position_;
  ::ExposureScene* exposure_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > triggers_;
  ::google::protobuf::uint32 id_;
  bool flag_;
  bool for_new_user_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > filters_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > reranks_;
  ::google::protobuf::RepeatedPtrField< ::TriggerConfExt > triggersconf_;
  ::RankConf* rank_;
  ::RerankServiceConf* rerank_srv_;
  ::google::protobuf::RepeatedPtrField< ::Conf > playconf_;
  ::ProfileConf* profile_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static PolicyConf* default_instance_;
};
// -------------------------------------------------------------------

class PolicyConfs : public ::google::protobuf::Message {
 public:
  PolicyConfs();
  virtual ~PolicyConfs();

  PolicyConfs(const PolicyConfs& from);

  inline PolicyConfs& operator=(const PolicyConfs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PolicyConfs& default_instance();

  void Swap(PolicyConfs* other);

  // implements Message ----------------------------------------------

  PolicyConfs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PolicyConfs& from);
  void MergeFrom(const PolicyConfs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PolicyConf policys = 1;
  inline int policys_size() const;
  inline void clear_policys();
  static const int kPolicysFieldNumber = 1;
  inline const ::PolicyConf& policys(int index) const;
  inline ::PolicyConf* mutable_policys(int index);
  inline ::PolicyConf* add_policys();
  inline const ::google::protobuf::RepeatedPtrField< ::PolicyConf >&
      policys() const;
  inline ::google::protobuf::RepeatedPtrField< ::PolicyConf >*
      mutable_policys();

  // required bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);

  // @@protoc_insertion_point(class_scope:PolicyConfs)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PolicyConf > policys_;
  bool flag_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static PolicyConfs* default_instance_;
};
// -------------------------------------------------------------------

class WhiteListConf : public ::google::protobuf::Message {
 public:
  WhiteListConf();
  virtual ~WhiteListConf();

  WhiteListConf(const WhiteListConf& from);

  inline WhiteListConf& operator=(const WhiteListConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WhiteListConf& default_instance();

  void Swap(WhiteListConf* other);

  // implements Message ----------------------------------------------

  WhiteListConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WhiteListConf& from);
  void MergeFrom(const WhiteListConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes wlfile_path = 3;
  inline bool has_wlfile_path() const;
  inline void clear_wlfile_path();
  static const int kWlfilePathFieldNumber = 3;
  inline const ::std::string& wlfile_path() const;
  inline void set_wlfile_path(const ::std::string& value);
  inline void set_wlfile_path(const char* value);
  inline void set_wlfile_path(const void* value, size_t size);
  inline ::std::string* mutable_wlfile_path();
  inline ::std::string* release_wlfile_path();
  inline void set_allocated_wlfile_path(::std::string* wlfile_path);

  // repeated uint32 policys = 4;
  inline int policys_size() const;
  inline void clear_policys();
  static const int kPolicysFieldNumber = 4;
  inline ::google::protobuf::uint32 policys(int index) const;
  inline void set_policys(int index, ::google::protobuf::uint32 value);
  inline void add_policys(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      policys() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_policys();

  // required bool flag = 5;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 5;
  inline bool flag() const;
  inline void set_flag(bool value);

  // @@protoc_insertion_point(class_scope:WhiteListConf)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_wlfile_path();
  inline void clear_has_wlfile_path();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* wlfile_path_;
  ::google::protobuf::uint32 id_;
  bool flag_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > policys_;
  friend void  protobuf_AddDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_AssignDesc_Proto_2fPolicy_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fPolicy_2eproto();

  void InitAsDefaultInstance();
  static WhiteListConf* default_instance_;
};
// ===================================================================


// ===================================================================

// Conf

// required bytes key = 1;
inline bool Conf::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Conf::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Conf::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Conf::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Conf::key() const {
  // @@protoc_insertion_point(field_get:Conf.key)
  return *key_;
}
inline void Conf::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:Conf.key)
}
inline void Conf::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:Conf.key)
}
inline void Conf::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Conf.key)
}
inline ::std::string* Conf::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Conf.key)
  return key_;
}
inline ::std::string* Conf::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Conf::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Conf.key)
}

// required bytes value = 2;
inline bool Conf::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Conf::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Conf::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Conf::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Conf::value() const {
  // @@protoc_insertion_point(field_get:Conf.value)
  return *value_;
}
inline void Conf::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:Conf.value)
}
inline void Conf::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:Conf.value)
}
inline void Conf::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Conf.value)
}
inline ::std::string* Conf::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Conf.value)
  return value_;
}
inline ::std::string* Conf::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Conf::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Conf.value)
}

// -------------------------------------------------------------------

// TriggerConf

// required uint32 id = 1;
inline bool TriggerConf::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TriggerConf::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TriggerConf::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TriggerConf::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TriggerConf::id() const {
  // @@protoc_insertion_point(field_get:TriggerConf.id)
  return id_;
}
inline void TriggerConf::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:TriggerConf.id)
}

// required bytes name = 2;
inline bool TriggerConf::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TriggerConf::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TriggerConf::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TriggerConf::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TriggerConf::name() const {
  // @@protoc_insertion_point(field_get:TriggerConf.name)
  return *name_;
}
inline void TriggerConf::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:TriggerConf.name)
}
inline void TriggerConf::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:TriggerConf.name)
}
inline void TriggerConf::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TriggerConf.name)
}
inline ::std::string* TriggerConf::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TriggerConf.name)
  return name_;
}
inline ::std::string* TriggerConf::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TriggerConf::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TriggerConf.name)
}

// required bytes host_name = 3;
inline bool TriggerConf::has_host_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TriggerConf::set_has_host_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TriggerConf::clear_has_host_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TriggerConf::clear_host_name() {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_->clear();
  }
  clear_has_host_name();
}
inline const ::std::string& TriggerConf::host_name() const {
  // @@protoc_insertion_point(field_get:TriggerConf.host_name)
  return *host_name_;
}
inline void TriggerConf::set_host_name(const ::std::string& value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
  // @@protoc_insertion_point(field_set:TriggerConf.host_name)
}
inline void TriggerConf::set_host_name(const char* value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:TriggerConf.host_name)
}
inline void TriggerConf::set_host_name(const void* value, size_t size) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TriggerConf.host_name)
}
inline ::std::string* TriggerConf::mutable_host_name() {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TriggerConf.host_name)
  return host_name_;
}
inline ::std::string* TriggerConf::release_host_name() {
  clear_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_name_;
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TriggerConf::set_allocated_host_name(::std::string* host_name) {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_name_;
  }
  if (host_name) {
    set_has_host_name();
    host_name_ = host_name;
  } else {
    clear_has_host_name();
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TriggerConf.host_name)
}

// required bytes api = 4;
inline bool TriggerConf::has_api() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TriggerConf::set_has_api() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TriggerConf::clear_has_api() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TriggerConf::clear_api() {
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_->clear();
  }
  clear_has_api();
}
inline const ::std::string& TriggerConf::api() const {
  // @@protoc_insertion_point(field_get:TriggerConf.api)
  return *api_;
}
inline void TriggerConf::set_api(const ::std::string& value) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(value);
  // @@protoc_insertion_point(field_set:TriggerConf.api)
}
inline void TriggerConf::set_api(const char* value) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(value);
  // @@protoc_insertion_point(field_set_char:TriggerConf.api)
}
inline void TriggerConf::set_api(const void* value, size_t size) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TriggerConf.api)
}
inline ::std::string* TriggerConf::mutable_api() {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TriggerConf.api)
  return api_;
}
inline ::std::string* TriggerConf::release_api() {
  clear_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = api_;
    api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TriggerConf::set_allocated_api(::std::string* api) {
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete api_;
  }
  if (api) {
    set_has_api();
    api_ = api;
  } else {
    clear_has_api();
    api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TriggerConf.api)
}

// repeated .Conf conf = 5;
inline int TriggerConf::conf_size() const {
  return conf_.size();
}
inline void TriggerConf::clear_conf() {
  conf_.Clear();
}
inline const ::Conf& TriggerConf::conf(int index) const {
  // @@protoc_insertion_point(field_get:TriggerConf.conf)
  return conf_.Get(index);
}
inline ::Conf* TriggerConf::mutable_conf(int index) {
  // @@protoc_insertion_point(field_mutable:TriggerConf.conf)
  return conf_.Mutable(index);
}
inline ::Conf* TriggerConf::add_conf() {
  // @@protoc_insertion_point(field_add:TriggerConf.conf)
  return conf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Conf >&
TriggerConf::conf() const {
  // @@protoc_insertion_point(field_list:TriggerConf.conf)
  return conf_;
}
inline ::google::protobuf::RepeatedPtrField< ::Conf >*
TriggerConf::mutable_conf() {
  // @@protoc_insertion_point(field_mutable_list:TriggerConf.conf)
  return &conf_;
}

// -------------------------------------------------------------------

// TriggerConfs

// repeated .TriggerConf triggers = 1;
inline int TriggerConfs::triggers_size() const {
  return triggers_.size();
}
inline void TriggerConfs::clear_triggers() {
  triggers_.Clear();
}
inline const ::TriggerConf& TriggerConfs::triggers(int index) const {
  // @@protoc_insertion_point(field_get:TriggerConfs.triggers)
  return triggers_.Get(index);
}
inline ::TriggerConf* TriggerConfs::mutable_triggers(int index) {
  // @@protoc_insertion_point(field_mutable:TriggerConfs.triggers)
  return triggers_.Mutable(index);
}
inline ::TriggerConf* TriggerConfs::add_triggers() {
  // @@protoc_insertion_point(field_add:TriggerConfs.triggers)
  return triggers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TriggerConf >&
TriggerConfs::triggers() const {
  // @@protoc_insertion_point(field_list:TriggerConfs.triggers)
  return triggers_;
}
inline ::google::protobuf::RepeatedPtrField< ::TriggerConf >*
TriggerConfs::mutable_triggers() {
  // @@protoc_insertion_point(field_mutable_list:TriggerConfs.triggers)
  return &triggers_;
}

// required bool flag = 2;
inline bool TriggerConfs::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TriggerConfs::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TriggerConfs::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TriggerConfs::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool TriggerConfs::flag() const {
  // @@protoc_insertion_point(field_get:TriggerConfs.flag)
  return flag_;
}
inline void TriggerConfs::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:TriggerConfs.flag)
}

// -------------------------------------------------------------------

// FilterConf

// required uint32 id = 1;
inline bool FilterConf::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FilterConf::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FilterConf::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FilterConf::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 FilterConf::id() const {
  // @@protoc_insertion_point(field_get:FilterConf.id)
  return id_;
}
inline void FilterConf::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FilterConf.id)
}

// required bytes name = 2;
inline bool FilterConf::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FilterConf::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FilterConf::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FilterConf::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FilterConf::name() const {
  // @@protoc_insertion_point(field_get:FilterConf.name)
  return *name_;
}
inline void FilterConf::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:FilterConf.name)
}
inline void FilterConf::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:FilterConf.name)
}
inline void FilterConf::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FilterConf.name)
}
inline ::std::string* FilterConf::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FilterConf.name)
  return name_;
}
inline ::std::string* FilterConf::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FilterConf::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FilterConf.name)
}

// required bytes file_name = 3;
inline bool FilterConf::has_file_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FilterConf::set_has_file_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FilterConf::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FilterConf::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& FilterConf::file_name() const {
  // @@protoc_insertion_point(field_get:FilterConf.file_name)
  return *file_name_;
}
inline void FilterConf::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:FilterConf.file_name)
}
inline void FilterConf::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:FilterConf.file_name)
}
inline void FilterConf::set_file_name(const void* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FilterConf.file_name)
}
inline ::std::string* FilterConf::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FilterConf.file_name)
  return file_name_;
}
inline ::std::string* FilterConf::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FilterConf::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FilterConf.file_name)
}

// -------------------------------------------------------------------

// FilterConfs

// repeated .FilterConf filters = 1;
inline int FilterConfs::filters_size() const {
  return filters_.size();
}
inline void FilterConfs::clear_filters() {
  filters_.Clear();
}
inline const ::FilterConf& FilterConfs::filters(int index) const {
  // @@protoc_insertion_point(field_get:FilterConfs.filters)
  return filters_.Get(index);
}
inline ::FilterConf* FilterConfs::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:FilterConfs.filters)
  return filters_.Mutable(index);
}
inline ::FilterConf* FilterConfs::add_filters() {
  // @@protoc_insertion_point(field_add:FilterConfs.filters)
  return filters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FilterConf >&
FilterConfs::filters() const {
  // @@protoc_insertion_point(field_list:FilterConfs.filters)
  return filters_;
}
inline ::google::protobuf::RepeatedPtrField< ::FilterConf >*
FilterConfs::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:FilterConfs.filters)
  return &filters_;
}

// required bool flag = 2;
inline bool FilterConfs::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FilterConfs::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FilterConfs::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FilterConfs::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool FilterConfs::flag() const {
  // @@protoc_insertion_point(field_get:FilterConfs.flag)
  return flag_;
}
inline void FilterConfs::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:FilterConfs.flag)
}

// -------------------------------------------------------------------

// RerankConf

// required uint32 id = 1;
inline bool RerankConf::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RerankConf::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RerankConf::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RerankConf::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RerankConf::id() const {
  // @@protoc_insertion_point(field_get:RerankConf.id)
  return id_;
}
inline void RerankConf::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:RerankConf.id)
}

// required bytes name = 2;
inline bool RerankConf::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RerankConf::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RerankConf::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RerankConf::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RerankConf::name() const {
  // @@protoc_insertion_point(field_get:RerankConf.name)
  return *name_;
}
inline void RerankConf::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:RerankConf.name)
}
inline void RerankConf::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RerankConf.name)
}
inline void RerankConf::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RerankConf.name)
}
inline ::std::string* RerankConf::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RerankConf.name)
  return name_;
}
inline ::std::string* RerankConf::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RerankConf::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RerankConf.name)
}

// required bytes file_name = 3;
inline bool RerankConf::has_file_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RerankConf::set_has_file_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RerankConf::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RerankConf::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& RerankConf::file_name() const {
  // @@protoc_insertion_point(field_get:RerankConf.file_name)
  return *file_name_;
}
inline void RerankConf::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:RerankConf.file_name)
}
inline void RerankConf::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RerankConf.file_name)
}
inline void RerankConf::set_file_name(const void* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RerankConf.file_name)
}
inline ::std::string* RerankConf::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RerankConf.file_name)
  return file_name_;
}
inline ::std::string* RerankConf::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RerankConf::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RerankConf.file_name)
}

// -------------------------------------------------------------------

// RerankConfs

// repeated .RerankConf reranks = 1;
inline int RerankConfs::reranks_size() const {
  return reranks_.size();
}
inline void RerankConfs::clear_reranks() {
  reranks_.Clear();
}
inline const ::RerankConf& RerankConfs::reranks(int index) const {
  // @@protoc_insertion_point(field_get:RerankConfs.reranks)
  return reranks_.Get(index);
}
inline ::RerankConf* RerankConfs::mutable_reranks(int index) {
  // @@protoc_insertion_point(field_mutable:RerankConfs.reranks)
  return reranks_.Mutable(index);
}
inline ::RerankConf* RerankConfs::add_reranks() {
  // @@protoc_insertion_point(field_add:RerankConfs.reranks)
  return reranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RerankConf >&
RerankConfs::reranks() const {
  // @@protoc_insertion_point(field_list:RerankConfs.reranks)
  return reranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::RerankConf >*
RerankConfs::mutable_reranks() {
  // @@protoc_insertion_point(field_mutable_list:RerankConfs.reranks)
  return &reranks_;
}

// required bool flag = 2;
inline bool RerankConfs::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RerankConfs::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RerankConfs::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RerankConfs::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool RerankConfs::flag() const {
  // @@protoc_insertion_point(field_get:RerankConfs.flag)
  return flag_;
}
inline void RerankConfs::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:RerankConfs.flag)
}

// -------------------------------------------------------------------

// RankConf

// required bytes host_name = 1;
inline bool RankConf::has_host_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankConf::set_has_host_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankConf::clear_has_host_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankConf::clear_host_name() {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_->clear();
  }
  clear_has_host_name();
}
inline const ::std::string& RankConf::host_name() const {
  // @@protoc_insertion_point(field_get:RankConf.host_name)
  return *host_name_;
}
inline void RankConf::set_host_name(const ::std::string& value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
  // @@protoc_insertion_point(field_set:RankConf.host_name)
}
inline void RankConf::set_host_name(const char* value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RankConf.host_name)
}
inline void RankConf::set_host_name(const void* value, size_t size) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RankConf.host_name)
}
inline ::std::string* RankConf::mutable_host_name() {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RankConf.host_name)
  return host_name_;
}
inline ::std::string* RankConf::release_host_name() {
  clear_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_name_;
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RankConf::set_allocated_host_name(::std::string* host_name) {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_name_;
  }
  if (host_name) {
    set_has_host_name();
    host_name_ = host_name;
  } else {
    clear_has_host_name();
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RankConf.host_name)
}

// required bytes api = 2;
inline bool RankConf::has_api() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankConf::set_has_api() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankConf::clear_has_api() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankConf::clear_api() {
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_->clear();
  }
  clear_has_api();
}
inline const ::std::string& RankConf::api() const {
  // @@protoc_insertion_point(field_get:RankConf.api)
  return *api_;
}
inline void RankConf::set_api(const ::std::string& value) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(value);
  // @@protoc_insertion_point(field_set:RankConf.api)
}
inline void RankConf::set_api(const char* value) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(value);
  // @@protoc_insertion_point(field_set_char:RankConf.api)
}
inline void RankConf::set_api(const void* value, size_t size) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RankConf.api)
}
inline ::std::string* RankConf::mutable_api() {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RankConf.api)
  return api_;
}
inline ::std::string* RankConf::release_api() {
  clear_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = api_;
    api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RankConf::set_allocated_api(::std::string* api) {
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete api_;
  }
  if (api) {
    set_has_api();
    api_ = api;
  } else {
    clear_has_api();
    api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RankConf.api)
}

// repeated .Conf conf = 3;
inline int RankConf::conf_size() const {
  return conf_.size();
}
inline void RankConf::clear_conf() {
  conf_.Clear();
}
inline const ::Conf& RankConf::conf(int index) const {
  // @@protoc_insertion_point(field_get:RankConf.conf)
  return conf_.Get(index);
}
inline ::Conf* RankConf::mutable_conf(int index) {
  // @@protoc_insertion_point(field_mutable:RankConf.conf)
  return conf_.Mutable(index);
}
inline ::Conf* RankConf::add_conf() {
  // @@protoc_insertion_point(field_add:RankConf.conf)
  return conf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Conf >&
RankConf::conf() const {
  // @@protoc_insertion_point(field_list:RankConf.conf)
  return conf_;
}
inline ::google::protobuf::RepeatedPtrField< ::Conf >*
RankConf::mutable_conf() {
  // @@protoc_insertion_point(field_mutable_list:RankConf.conf)
  return &conf_;
}

// -------------------------------------------------------------------

// ProfileConf

// required bytes host_name = 1;
inline bool ProfileConf::has_host_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfileConf::set_has_host_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProfileConf::clear_has_host_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProfileConf::clear_host_name() {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_->clear();
  }
  clear_has_host_name();
}
inline const ::std::string& ProfileConf::host_name() const {
  // @@protoc_insertion_point(field_get:ProfileConf.host_name)
  return *host_name_;
}
inline void ProfileConf::set_host_name(const ::std::string& value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
  // @@protoc_insertion_point(field_set:ProfileConf.host_name)
}
inline void ProfileConf::set_host_name(const char* value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProfileConf.host_name)
}
inline void ProfileConf::set_host_name(const void* value, size_t size) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProfileConf.host_name)
}
inline ::std::string* ProfileConf::mutable_host_name() {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProfileConf.host_name)
  return host_name_;
}
inline ::std::string* ProfileConf::release_host_name() {
  clear_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_name_;
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProfileConf::set_allocated_host_name(::std::string* host_name) {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_name_;
  }
  if (host_name) {
    set_has_host_name();
    host_name_ = host_name;
  } else {
    clear_has_host_name();
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProfileConf.host_name)
}

// required bytes api = 2;
inline bool ProfileConf::has_api() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfileConf::set_has_api() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProfileConf::clear_has_api() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProfileConf::clear_api() {
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_->clear();
  }
  clear_has_api();
}
inline const ::std::string& ProfileConf::api() const {
  // @@protoc_insertion_point(field_get:ProfileConf.api)
  return *api_;
}
inline void ProfileConf::set_api(const ::std::string& value) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(value);
  // @@protoc_insertion_point(field_set:ProfileConf.api)
}
inline void ProfileConf::set_api(const char* value) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProfileConf.api)
}
inline void ProfileConf::set_api(const void* value, size_t size) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProfileConf.api)
}
inline ::std::string* ProfileConf::mutable_api() {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProfileConf.api)
  return api_;
}
inline ::std::string* ProfileConf::release_api() {
  clear_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = api_;
    api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProfileConf::set_allocated_api(::std::string* api) {
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete api_;
  }
  if (api) {
    set_has_api();
    api_ = api;
  } else {
    clear_has_api();
    api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProfileConf.api)
}

// repeated .Conf conf = 3;
inline int ProfileConf::conf_size() const {
  return conf_.size();
}
inline void ProfileConf::clear_conf() {
  conf_.Clear();
}
inline const ::Conf& ProfileConf::conf(int index) const {
  // @@protoc_insertion_point(field_get:ProfileConf.conf)
  return conf_.Get(index);
}
inline ::Conf* ProfileConf::mutable_conf(int index) {
  // @@protoc_insertion_point(field_mutable:ProfileConf.conf)
  return conf_.Mutable(index);
}
inline ::Conf* ProfileConf::add_conf() {
  // @@protoc_insertion_point(field_add:ProfileConf.conf)
  return conf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Conf >&
ProfileConf::conf() const {
  // @@protoc_insertion_point(field_list:ProfileConf.conf)
  return conf_;
}
inline ::google::protobuf::RepeatedPtrField< ::Conf >*
ProfileConf::mutable_conf() {
  // @@protoc_insertion_point(field_mutable_list:ProfileConf.conf)
  return &conf_;
}

// -------------------------------------------------------------------

// RerankServiceConf

// required bytes host_name = 1;
inline bool RerankServiceConf::has_host_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RerankServiceConf::set_has_host_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RerankServiceConf::clear_has_host_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RerankServiceConf::clear_host_name() {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_->clear();
  }
  clear_has_host_name();
}
inline const ::std::string& RerankServiceConf::host_name() const {
  // @@protoc_insertion_point(field_get:RerankServiceConf.host_name)
  return *host_name_;
}
inline void RerankServiceConf::set_host_name(const ::std::string& value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
  // @@protoc_insertion_point(field_set:RerankServiceConf.host_name)
}
inline void RerankServiceConf::set_host_name(const char* value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RerankServiceConf.host_name)
}
inline void RerankServiceConf::set_host_name(const void* value, size_t size) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RerankServiceConf.host_name)
}
inline ::std::string* RerankServiceConf::mutable_host_name() {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RerankServiceConf.host_name)
  return host_name_;
}
inline ::std::string* RerankServiceConf::release_host_name() {
  clear_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_name_;
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RerankServiceConf::set_allocated_host_name(::std::string* host_name) {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_name_;
  }
  if (host_name) {
    set_has_host_name();
    host_name_ = host_name;
  } else {
    clear_has_host_name();
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RerankServiceConf.host_name)
}

// required bytes api = 2;
inline bool RerankServiceConf::has_api() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RerankServiceConf::set_has_api() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RerankServiceConf::clear_has_api() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RerankServiceConf::clear_api() {
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_->clear();
  }
  clear_has_api();
}
inline const ::std::string& RerankServiceConf::api() const {
  // @@protoc_insertion_point(field_get:RerankServiceConf.api)
  return *api_;
}
inline void RerankServiceConf::set_api(const ::std::string& value) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(value);
  // @@protoc_insertion_point(field_set:RerankServiceConf.api)
}
inline void RerankServiceConf::set_api(const char* value) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(value);
  // @@protoc_insertion_point(field_set_char:RerankServiceConf.api)
}
inline void RerankServiceConf::set_api(const void* value, size_t size) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RerankServiceConf.api)
}
inline ::std::string* RerankServiceConf::mutable_api() {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RerankServiceConf.api)
  return api_;
}
inline ::std::string* RerankServiceConf::release_api() {
  clear_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = api_;
    api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RerankServiceConf::set_allocated_api(::std::string* api) {
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete api_;
  }
  if (api) {
    set_has_api();
    api_ = api;
  } else {
    clear_has_api();
    api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RerankServiceConf.api)
}

// repeated .Conf conf = 3;
inline int RerankServiceConf::conf_size() const {
  return conf_.size();
}
inline void RerankServiceConf::clear_conf() {
  conf_.Clear();
}
inline const ::Conf& RerankServiceConf::conf(int index) const {
  // @@protoc_insertion_point(field_get:RerankServiceConf.conf)
  return conf_.Get(index);
}
inline ::Conf* RerankServiceConf::mutable_conf(int index) {
  // @@protoc_insertion_point(field_mutable:RerankServiceConf.conf)
  return conf_.Mutable(index);
}
inline ::Conf* RerankServiceConf::add_conf() {
  // @@protoc_insertion_point(field_add:RerankServiceConf.conf)
  return conf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Conf >&
RerankServiceConf::conf() const {
  // @@protoc_insertion_point(field_list:RerankServiceConf.conf)
  return conf_;
}
inline ::google::protobuf::RepeatedPtrField< ::Conf >*
RerankServiceConf::mutable_conf() {
  // @@protoc_insertion_point(field_mutable_list:RerankServiceConf.conf)
  return &conf_;
}

// -------------------------------------------------------------------

// ReloadScript

// required bytes file_name = 1;
inline bool ReloadScript::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReloadScript::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReloadScript::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReloadScript::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& ReloadScript::file_name() const {
  // @@protoc_insertion_point(field_get:ReloadScript.file_name)
  return *file_name_;
}
inline void ReloadScript::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:ReloadScript.file_name)
}
inline void ReloadScript::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ReloadScript.file_name)
}
inline void ReloadScript::set_file_name(const void* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ReloadScript.file_name)
}
inline ::std::string* ReloadScript::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ReloadScript.file_name)
  return file_name_;
}
inline ::std::string* ReloadScript::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReloadScript::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ReloadScript.file_name)
}

// -------------------------------------------------------------------

// Range

// required int32 min = 1;
inline bool Range::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Range::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Range::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Range::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline ::google::protobuf::int32 Range::min() const {
  // @@protoc_insertion_point(field_get:Range.min)
  return min_;
}
inline void Range::set_min(::google::protobuf::int32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:Range.min)
}

// required int32 max = 2;
inline bool Range::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Range::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Range::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Range::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline ::google::protobuf::int32 Range::max() const {
  // @@protoc_insertion_point(field_get:Range.max)
  return max_;
}
inline void Range::set_max(::google::protobuf::int32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:Range.max)
}

// -------------------------------------------------------------------

// BaseImage

// required int32 sex = 1;
inline bool BaseImage::has_sex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseImage::set_has_sex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseImage::clear_has_sex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseImage::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 BaseImage::sex() const {
  // @@protoc_insertion_point(field_get:BaseImage.sex)
  return sex_;
}
inline void BaseImage::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:BaseImage.sex)
}

// repeated .Range age = 2;
inline int BaseImage::age_size() const {
  return age_.size();
}
inline void BaseImage::clear_age() {
  age_.Clear();
}
inline const ::Range& BaseImage::age(int index) const {
  // @@protoc_insertion_point(field_get:BaseImage.age)
  return age_.Get(index);
}
inline ::Range* BaseImage::mutable_age(int index) {
  // @@protoc_insertion_point(field_mutable:BaseImage.age)
  return age_.Mutable(index);
}
inline ::Range* BaseImage::add_age() {
  // @@protoc_insertion_point(field_add:BaseImage.age)
  return age_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Range >&
BaseImage::age() const {
  // @@protoc_insertion_point(field_list:BaseImage.age)
  return age_;
}
inline ::google::protobuf::RepeatedPtrField< ::Range >*
BaseImage::mutable_age() {
  // @@protoc_insertion_point(field_mutable_list:BaseImage.age)
  return &age_;
}

// repeated bytes edu = 3;
inline int BaseImage::edu_size() const {
  return edu_.size();
}
inline void BaseImage::clear_edu() {
  edu_.Clear();
}
inline const ::std::string& BaseImage::edu(int index) const {
  // @@protoc_insertion_point(field_get:BaseImage.edu)
  return edu_.Get(index);
}
inline ::std::string* BaseImage::mutable_edu(int index) {
  // @@protoc_insertion_point(field_mutable:BaseImage.edu)
  return edu_.Mutable(index);
}
inline void BaseImage::set_edu(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BaseImage.edu)
  edu_.Mutable(index)->assign(value);
}
inline void BaseImage::set_edu(int index, const char* value) {
  edu_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BaseImage.edu)
}
inline void BaseImage::set_edu(int index, const void* value, size_t size) {
  edu_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BaseImage.edu)
}
inline ::std::string* BaseImage::add_edu() {
  return edu_.Add();
}
inline void BaseImage::add_edu(const ::std::string& value) {
  edu_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BaseImage.edu)
}
inline void BaseImage::add_edu(const char* value) {
  edu_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BaseImage.edu)
}
inline void BaseImage::add_edu(const void* value, size_t size) {
  edu_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BaseImage.edu)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BaseImage::edu() const {
  // @@protoc_insertion_point(field_list:BaseImage.edu)
  return edu_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BaseImage::mutable_edu() {
  // @@protoc_insertion_point(field_mutable_list:BaseImage.edu)
  return &edu_;
}

// repeated bytes job = 4;
inline int BaseImage::job_size() const {
  return job_.size();
}
inline void BaseImage::clear_job() {
  job_.Clear();
}
inline const ::std::string& BaseImage::job(int index) const {
  // @@protoc_insertion_point(field_get:BaseImage.job)
  return job_.Get(index);
}
inline ::std::string* BaseImage::mutable_job(int index) {
  // @@protoc_insertion_point(field_mutable:BaseImage.job)
  return job_.Mutable(index);
}
inline void BaseImage::set_job(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BaseImage.job)
  job_.Mutable(index)->assign(value);
}
inline void BaseImage::set_job(int index, const char* value) {
  job_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BaseImage.job)
}
inline void BaseImage::set_job(int index, const void* value, size_t size) {
  job_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BaseImage.job)
}
inline ::std::string* BaseImage::add_job() {
  return job_.Add();
}
inline void BaseImage::add_job(const ::std::string& value) {
  job_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BaseImage.job)
}
inline void BaseImage::add_job(const char* value) {
  job_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BaseImage.job)
}
inline void BaseImage::add_job(const void* value, size_t size) {
  job_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BaseImage.job)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BaseImage::job() const {
  // @@protoc_insertion_point(field_list:BaseImage.job)
  return job_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BaseImage::mutable_job() {
  // @@protoc_insertion_point(field_mutable_list:BaseImage.job)
  return &job_;
}

// -------------------------------------------------------------------

// RegionImage

// repeated int32 country = 1;
inline int RegionImage::country_size() const {
  return country_.size();
}
inline void RegionImage::clear_country() {
  country_.Clear();
}
inline ::google::protobuf::int32 RegionImage::country(int index) const {
  // @@protoc_insertion_point(field_get:RegionImage.country)
  return country_.Get(index);
}
inline void RegionImage::set_country(int index, ::google::protobuf::int32 value) {
  country_.Set(index, value);
  // @@protoc_insertion_point(field_set:RegionImage.country)
}
inline void RegionImage::add_country(::google::protobuf::int32 value) {
  country_.Add(value);
  // @@protoc_insertion_point(field_add:RegionImage.country)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RegionImage::country() const {
  // @@protoc_insertion_point(field_list:RegionImage.country)
  return country_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RegionImage::mutable_country() {
  // @@protoc_insertion_point(field_mutable_list:RegionImage.country)
  return &country_;
}

// repeated int32 province = 2;
inline int RegionImage::province_size() const {
  return province_.size();
}
inline void RegionImage::clear_province() {
  province_.Clear();
}
inline ::google::protobuf::int32 RegionImage::province(int index) const {
  // @@protoc_insertion_point(field_get:RegionImage.province)
  return province_.Get(index);
}
inline void RegionImage::set_province(int index, ::google::protobuf::int32 value) {
  province_.Set(index, value);
  // @@protoc_insertion_point(field_set:RegionImage.province)
}
inline void RegionImage::add_province(::google::protobuf::int32 value) {
  province_.Add(value);
  // @@protoc_insertion_point(field_add:RegionImage.province)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RegionImage::province() const {
  // @@protoc_insertion_point(field_list:RegionImage.province)
  return province_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RegionImage::mutable_province() {
  // @@protoc_insertion_point(field_mutable_list:RegionImage.province)
  return &province_;
}

// repeated int32 city = 3;
inline int RegionImage::city_size() const {
  return city_.size();
}
inline void RegionImage::clear_city() {
  city_.Clear();
}
inline ::google::protobuf::int32 RegionImage::city(int index) const {
  // @@protoc_insertion_point(field_get:RegionImage.city)
  return city_.Get(index);
}
inline void RegionImage::set_city(int index, ::google::protobuf::int32 value) {
  city_.Set(index, value);
  // @@protoc_insertion_point(field_set:RegionImage.city)
}
inline void RegionImage::add_city(::google::protobuf::int32 value) {
  city_.Add(value);
  // @@protoc_insertion_point(field_add:RegionImage.city)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RegionImage::city() const {
  // @@protoc_insertion_point(field_list:RegionImage.city)
  return city_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RegionImage::mutable_city() {
  // @@protoc_insertion_point(field_mutable_list:RegionImage.city)
  return &city_;
}

// -------------------------------------------------------------------

// InterestImage

// repeated int32 first_level = 1;
inline int InterestImage::first_level_size() const {
  return first_level_.size();
}
inline void InterestImage::clear_first_level() {
  first_level_.Clear();
}
inline ::google::protobuf::int32 InterestImage::first_level(int index) const {
  // @@protoc_insertion_point(field_get:InterestImage.first_level)
  return first_level_.Get(index);
}
inline void InterestImage::set_first_level(int index, ::google::protobuf::int32 value) {
  first_level_.Set(index, value);
  // @@protoc_insertion_point(field_set:InterestImage.first_level)
}
inline void InterestImage::add_first_level(::google::protobuf::int32 value) {
  first_level_.Add(value);
  // @@protoc_insertion_point(field_add:InterestImage.first_level)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InterestImage::first_level() const {
  // @@protoc_insertion_point(field_list:InterestImage.first_level)
  return first_level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InterestImage::mutable_first_level() {
  // @@protoc_insertion_point(field_mutable_list:InterestImage.first_level)
  return &first_level_;
}

// repeated int32 second_level = 2;
inline int InterestImage::second_level_size() const {
  return second_level_.size();
}
inline void InterestImage::clear_second_level() {
  second_level_.Clear();
}
inline ::google::protobuf::int32 InterestImage::second_level(int index) const {
  // @@protoc_insertion_point(field_get:InterestImage.second_level)
  return second_level_.Get(index);
}
inline void InterestImage::set_second_level(int index, ::google::protobuf::int32 value) {
  second_level_.Set(index, value);
  // @@protoc_insertion_point(field_set:InterestImage.second_level)
}
inline void InterestImage::add_second_level(::google::protobuf::int32 value) {
  second_level_.Add(value);
  // @@protoc_insertion_point(field_add:InterestImage.second_level)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InterestImage::second_level() const {
  // @@protoc_insertion_point(field_list:InterestImage.second_level)
  return second_level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InterestImage::mutable_second_level() {
  // @@protoc_insertion_point(field_mutable_list:InterestImage.second_level)
  return &second_level_;
}

// repeated int32 third_level = 3;
inline int InterestImage::third_level_size() const {
  return third_level_.size();
}
inline void InterestImage::clear_third_level() {
  third_level_.Clear();
}
inline ::google::protobuf::int32 InterestImage::third_level(int index) const {
  // @@protoc_insertion_point(field_get:InterestImage.third_level)
  return third_level_.Get(index);
}
inline void InterestImage::set_third_level(int index, ::google::protobuf::int32 value) {
  third_level_.Set(index, value);
  // @@protoc_insertion_point(field_set:InterestImage.third_level)
}
inline void InterestImage::add_third_level(::google::protobuf::int32 value) {
  third_level_.Add(value);
  // @@protoc_insertion_point(field_add:InterestImage.third_level)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InterestImage::third_level() const {
  // @@protoc_insertion_point(field_list:InterestImage.third_level)
  return third_level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InterestImage::mutable_third_level() {
  // @@protoc_insertion_point(field_mutable_list:InterestImage.third_level)
  return &third_level_;
}

// -------------------------------------------------------------------

// BaseScene

// repeated bytes os = 1;
inline int BaseScene::os_size() const {
  return os_.size();
}
inline void BaseScene::clear_os() {
  os_.Clear();
}
inline const ::std::string& BaseScene::os(int index) const {
  // @@protoc_insertion_point(field_get:BaseScene.os)
  return os_.Get(index);
}
inline ::std::string* BaseScene::mutable_os(int index) {
  // @@protoc_insertion_point(field_mutable:BaseScene.os)
  return os_.Mutable(index);
}
inline void BaseScene::set_os(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BaseScene.os)
  os_.Mutable(index)->assign(value);
}
inline void BaseScene::set_os(int index, const char* value) {
  os_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BaseScene.os)
}
inline void BaseScene::set_os(int index, const void* value, size_t size) {
  os_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BaseScene.os)
}
inline ::std::string* BaseScene::add_os() {
  return os_.Add();
}
inline void BaseScene::add_os(const ::std::string& value) {
  os_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BaseScene.os)
}
inline void BaseScene::add_os(const char* value) {
  os_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BaseScene.os)
}
inline void BaseScene::add_os(const void* value, size_t size) {
  os_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BaseScene.os)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BaseScene::os() const {
  // @@protoc_insertion_point(field_list:BaseScene.os)
  return os_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BaseScene::mutable_os() {
  // @@protoc_insertion_point(field_mutable_list:BaseScene.os)
  return &os_;
}

// repeated bytes net = 2;
inline int BaseScene::net_size() const {
  return net_.size();
}
inline void BaseScene::clear_net() {
  net_.Clear();
}
inline const ::std::string& BaseScene::net(int index) const {
  // @@protoc_insertion_point(field_get:BaseScene.net)
  return net_.Get(index);
}
inline ::std::string* BaseScene::mutable_net(int index) {
  // @@protoc_insertion_point(field_mutable:BaseScene.net)
  return net_.Mutable(index);
}
inline void BaseScene::set_net(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BaseScene.net)
  net_.Mutable(index)->assign(value);
}
inline void BaseScene::set_net(int index, const char* value) {
  net_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BaseScene.net)
}
inline void BaseScene::set_net(int index, const void* value, size_t size) {
  net_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BaseScene.net)
}
inline ::std::string* BaseScene::add_net() {
  return net_.Add();
}
inline void BaseScene::add_net(const ::std::string& value) {
  net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BaseScene.net)
}
inline void BaseScene::add_net(const char* value) {
  net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BaseScene.net)
}
inline void BaseScene::add_net(const void* value, size_t size) {
  net_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BaseScene.net)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BaseScene::net() const {
  // @@protoc_insertion_point(field_list:BaseScene.net)
  return net_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BaseScene::mutable_net() {
  // @@protoc_insertion_point(field_mutable_list:BaseScene.net)
  return &net_;
}

// repeated bytes platform = 3;
inline int BaseScene::platform_size() const {
  return platform_.size();
}
inline void BaseScene::clear_platform() {
  platform_.Clear();
}
inline const ::std::string& BaseScene::platform(int index) const {
  // @@protoc_insertion_point(field_get:BaseScene.platform)
  return platform_.Get(index);
}
inline ::std::string* BaseScene::mutable_platform(int index) {
  // @@protoc_insertion_point(field_mutable:BaseScene.platform)
  return platform_.Mutable(index);
}
inline void BaseScene::set_platform(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BaseScene.platform)
  platform_.Mutable(index)->assign(value);
}
inline void BaseScene::set_platform(int index, const char* value) {
  platform_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BaseScene.platform)
}
inline void BaseScene::set_platform(int index, const void* value, size_t size) {
  platform_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BaseScene.platform)
}
inline ::std::string* BaseScene::add_platform() {
  return platform_.Add();
}
inline void BaseScene::add_platform(const ::std::string& value) {
  platform_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BaseScene.platform)
}
inline void BaseScene::add_platform(const char* value) {
  platform_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BaseScene.platform)
}
inline void BaseScene::add_platform(const void* value, size_t size) {
  platform_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BaseScene.platform)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BaseScene::platform() const {
  // @@protoc_insertion_point(field_list:BaseScene.platform)
  return platform_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BaseScene::mutable_platform() {
  // @@protoc_insertion_point(field_mutable_list:BaseScene.platform)
  return &platform_;
}

// -------------------------------------------------------------------

// CurrentPosition

// repeated int32 country = 1;
inline int CurrentPosition::country_size() const {
  return country_.size();
}
inline void CurrentPosition::clear_country() {
  country_.Clear();
}
inline ::google::protobuf::int32 CurrentPosition::country(int index) const {
  // @@protoc_insertion_point(field_get:CurrentPosition.country)
  return country_.Get(index);
}
inline void CurrentPosition::set_country(int index, ::google::protobuf::int32 value) {
  country_.Set(index, value);
  // @@protoc_insertion_point(field_set:CurrentPosition.country)
}
inline void CurrentPosition::add_country(::google::protobuf::int32 value) {
  country_.Add(value);
  // @@protoc_insertion_point(field_add:CurrentPosition.country)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CurrentPosition::country() const {
  // @@protoc_insertion_point(field_list:CurrentPosition.country)
  return country_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CurrentPosition::mutable_country() {
  // @@protoc_insertion_point(field_mutable_list:CurrentPosition.country)
  return &country_;
}

// repeated int32 province = 2;
inline int CurrentPosition::province_size() const {
  return province_.size();
}
inline void CurrentPosition::clear_province() {
  province_.Clear();
}
inline ::google::protobuf::int32 CurrentPosition::province(int index) const {
  // @@protoc_insertion_point(field_get:CurrentPosition.province)
  return province_.Get(index);
}
inline void CurrentPosition::set_province(int index, ::google::protobuf::int32 value) {
  province_.Set(index, value);
  // @@protoc_insertion_point(field_set:CurrentPosition.province)
}
inline void CurrentPosition::add_province(::google::protobuf::int32 value) {
  province_.Add(value);
  // @@protoc_insertion_point(field_add:CurrentPosition.province)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CurrentPosition::province() const {
  // @@protoc_insertion_point(field_list:CurrentPosition.province)
  return province_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CurrentPosition::mutable_province() {
  // @@protoc_insertion_point(field_mutable_list:CurrentPosition.province)
  return &province_;
}

// repeated int32 city = 3;
inline int CurrentPosition::city_size() const {
  return city_.size();
}
inline void CurrentPosition::clear_city() {
  city_.Clear();
}
inline ::google::protobuf::int32 CurrentPosition::city(int index) const {
  // @@protoc_insertion_point(field_get:CurrentPosition.city)
  return city_.Get(index);
}
inline void CurrentPosition::set_city(int index, ::google::protobuf::int32 value) {
  city_.Set(index, value);
  // @@protoc_insertion_point(field_set:CurrentPosition.city)
}
inline void CurrentPosition::add_city(::google::protobuf::int32 value) {
  city_.Add(value);
  // @@protoc_insertion_point(field_add:CurrentPosition.city)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CurrentPosition::city() const {
  // @@protoc_insertion_point(field_list:CurrentPosition.city)
  return city_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CurrentPosition::mutable_city() {
  // @@protoc_insertion_point(field_mutable_list:CurrentPosition.city)
  return &city_;
}

// -------------------------------------------------------------------

// ExposureScene

// repeated bytes channel = 1;
inline int ExposureScene::channel_size() const {
  return channel_.size();
}
inline void ExposureScene::clear_channel() {
  channel_.Clear();
}
inline const ::std::string& ExposureScene::channel(int index) const {
  // @@protoc_insertion_point(field_get:ExposureScene.channel)
  return channel_.Get(index);
}
inline ::std::string* ExposureScene::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:ExposureScene.channel)
  return channel_.Mutable(index);
}
inline void ExposureScene::set_channel(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ExposureScene.channel)
  channel_.Mutable(index)->assign(value);
}
inline void ExposureScene::set_channel(int index, const char* value) {
  channel_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ExposureScene.channel)
}
inline void ExposureScene::set_channel(int index, const void* value, size_t size) {
  channel_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ExposureScene.channel)
}
inline ::std::string* ExposureScene::add_channel() {
  return channel_.Add();
}
inline void ExposureScene::add_channel(const ::std::string& value) {
  channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ExposureScene.channel)
}
inline void ExposureScene::add_channel(const char* value) {
  channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ExposureScene.channel)
}
inline void ExposureScene::add_channel(const void* value, size_t size) {
  channel_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ExposureScene.channel)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExposureScene::channel() const {
  // @@protoc_insertion_point(field_list:ExposureScene.channel)
  return channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ExposureScene::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:ExposureScene.channel)
  return &channel_;
}

// optional uint32 alg_version = 2;
inline bool ExposureScene::has_alg_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExposureScene::set_has_alg_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExposureScene::clear_has_alg_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExposureScene::clear_alg_version() {
  alg_version_ = 0u;
  clear_has_alg_version();
}
inline ::google::protobuf::uint32 ExposureScene::alg_version() const {
  // @@protoc_insertion_point(field_get:ExposureScene.alg_version)
  return alg_version_;
}
inline void ExposureScene::set_alg_version(::google::protobuf::uint32 value) {
  set_has_alg_version();
  alg_version_ = value;
  // @@protoc_insertion_point(field_set:ExposureScene.alg_version)
}

// -------------------------------------------------------------------

// TriggerConfExt

// required uint32 id = 1;
inline bool TriggerConfExt::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TriggerConfExt::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TriggerConfExt::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TriggerConfExt::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TriggerConfExt::id() const {
  // @@protoc_insertion_point(field_get:TriggerConfExt.id)
  return id_;
}
inline void TriggerConfExt::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:TriggerConfExt.id)
}

// repeated .Conf conf = 2;
inline int TriggerConfExt::conf_size() const {
  return conf_.size();
}
inline void TriggerConfExt::clear_conf() {
  conf_.Clear();
}
inline const ::Conf& TriggerConfExt::conf(int index) const {
  // @@protoc_insertion_point(field_get:TriggerConfExt.conf)
  return conf_.Get(index);
}
inline ::Conf* TriggerConfExt::mutable_conf(int index) {
  // @@protoc_insertion_point(field_mutable:TriggerConfExt.conf)
  return conf_.Mutable(index);
}
inline ::Conf* TriggerConfExt::add_conf() {
  // @@protoc_insertion_point(field_add:TriggerConfExt.conf)
  return conf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Conf >&
TriggerConfExt::conf() const {
  // @@protoc_insertion_point(field_list:TriggerConfExt.conf)
  return conf_;
}
inline ::google::protobuf::RepeatedPtrField< ::Conf >*
TriggerConfExt::mutable_conf() {
  // @@protoc_insertion_point(field_mutable_list:TriggerConfExt.conf)
  return &conf_;
}

// optional bool ctr = 3;
inline bool TriggerConfExt::has_ctr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TriggerConfExt::set_has_ctr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TriggerConfExt::clear_has_ctr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TriggerConfExt::clear_ctr() {
  ctr_ = false;
  clear_has_ctr();
}
inline bool TriggerConfExt::ctr() const {
  // @@protoc_insertion_point(field_get:TriggerConfExt.ctr)
  return ctr_;
}
inline void TriggerConfExt::set_ctr(bool value) {
  set_has_ctr();
  ctr_ = value;
  // @@protoc_insertion_point(field_set:TriggerConfExt.ctr)
}

// -------------------------------------------------------------------

// PolicyConf

// required uint32 id = 1;
inline bool PolicyConf::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PolicyConf::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PolicyConf::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PolicyConf::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PolicyConf::id() const {
  // @@protoc_insertion_point(field_get:PolicyConf.id)
  return id_;
}
inline void PolicyConf::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PolicyConf.id)
}

// required bytes name = 2;
inline bool PolicyConf::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PolicyConf::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PolicyConf::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PolicyConf::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PolicyConf::name() const {
  // @@protoc_insertion_point(field_get:PolicyConf.name)
  return *name_;
}
inline void PolicyConf::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:PolicyConf.name)
}
inline void PolicyConf::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PolicyConf.name)
}
inline void PolicyConf::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PolicyConf.name)
}
inline ::std::string* PolicyConf::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PolicyConf.name)
  return name_;
}
inline ::std::string* PolicyConf::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PolicyConf::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PolicyConf.name)
}

// optional .BaseImage base = 3;
inline bool PolicyConf::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PolicyConf::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PolicyConf::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PolicyConf::clear_base() {
  if (base_ != NULL) base_->::BaseImage::Clear();
  clear_has_base();
}
inline const ::BaseImage& PolicyConf::base() const {
  // @@protoc_insertion_point(field_get:PolicyConf.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::BaseImage* PolicyConf::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::BaseImage;
  // @@protoc_insertion_point(field_mutable:PolicyConf.base)
  return base_;
}
inline ::BaseImage* PolicyConf::release_base() {
  clear_has_base();
  ::BaseImage* temp = base_;
  base_ = NULL;
  return temp;
}
inline void PolicyConf::set_allocated_base(::BaseImage* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:PolicyConf.base)
}

// optional .RegionImage region = 4;
inline bool PolicyConf::has_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PolicyConf::set_has_region() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PolicyConf::clear_has_region() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PolicyConf::clear_region() {
  if (region_ != NULL) region_->::RegionImage::Clear();
  clear_has_region();
}
inline const ::RegionImage& PolicyConf::region() const {
  // @@protoc_insertion_point(field_get:PolicyConf.region)
  return region_ != NULL ? *region_ : *default_instance_->region_;
}
inline ::RegionImage* PolicyConf::mutable_region() {
  set_has_region();
  if (region_ == NULL) region_ = new ::RegionImage;
  // @@protoc_insertion_point(field_mutable:PolicyConf.region)
  return region_;
}
inline ::RegionImage* PolicyConf::release_region() {
  clear_has_region();
  ::RegionImage* temp = region_;
  region_ = NULL;
  return temp;
}
inline void PolicyConf::set_allocated_region(::RegionImage* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
  // @@protoc_insertion_point(field_set_allocated:PolicyConf.region)
}

// optional .InterestImage interest = 5;
inline bool PolicyConf::has_interest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PolicyConf::set_has_interest() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PolicyConf::clear_has_interest() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PolicyConf::clear_interest() {
  if (interest_ != NULL) interest_->::InterestImage::Clear();
  clear_has_interest();
}
inline const ::InterestImage& PolicyConf::interest() const {
  // @@protoc_insertion_point(field_get:PolicyConf.interest)
  return interest_ != NULL ? *interest_ : *default_instance_->interest_;
}
inline ::InterestImage* PolicyConf::mutable_interest() {
  set_has_interest();
  if (interest_ == NULL) interest_ = new ::InterestImage;
  // @@protoc_insertion_point(field_mutable:PolicyConf.interest)
  return interest_;
}
inline ::InterestImage* PolicyConf::release_interest() {
  clear_has_interest();
  ::InterestImage* temp = interest_;
  interest_ = NULL;
  return temp;
}
inline void PolicyConf::set_allocated_interest(::InterestImage* interest) {
  delete interest_;
  interest_ = interest;
  if (interest) {
    set_has_interest();
  } else {
    clear_has_interest();
  }
  // @@protoc_insertion_point(field_set_allocated:PolicyConf.interest)
}

// optional .BaseScene scene = 6;
inline bool PolicyConf::has_scene() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PolicyConf::set_has_scene() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PolicyConf::clear_has_scene() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PolicyConf::clear_scene() {
  if (scene_ != NULL) scene_->::BaseScene::Clear();
  clear_has_scene();
}
inline const ::BaseScene& PolicyConf::scene() const {
  // @@protoc_insertion_point(field_get:PolicyConf.scene)
  return scene_ != NULL ? *scene_ : *default_instance_->scene_;
}
inline ::BaseScene* PolicyConf::mutable_scene() {
  set_has_scene();
  if (scene_ == NULL) scene_ = new ::BaseScene;
  // @@protoc_insertion_point(field_mutable:PolicyConf.scene)
  return scene_;
}
inline ::BaseScene* PolicyConf::release_scene() {
  clear_has_scene();
  ::BaseScene* temp = scene_;
  scene_ = NULL;
  return temp;
}
inline void PolicyConf::set_allocated_scene(::BaseScene* scene) {
  delete scene_;
  scene_ = scene;
  if (scene) {
    set_has_scene();
  } else {
    clear_has_scene();
  }
  // @@protoc_insertion_point(field_set_allocated:PolicyConf.scene)
}

// optional .CurrentPosition position = 7;
inline bool PolicyConf::has_position() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PolicyConf::set_has_position() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PolicyConf::clear_has_position() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PolicyConf::clear_position() {
  if (position_ != NULL) position_->::CurrentPosition::Clear();
  clear_has_position();
}
inline const ::CurrentPosition& PolicyConf::position() const {
  // @@protoc_insertion_point(field_get:PolicyConf.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::CurrentPosition* PolicyConf::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::CurrentPosition;
  // @@protoc_insertion_point(field_mutable:PolicyConf.position)
  return position_;
}
inline ::CurrentPosition* PolicyConf::release_position() {
  clear_has_position();
  ::CurrentPosition* temp = position_;
  position_ = NULL;
  return temp;
}
inline void PolicyConf::set_allocated_position(::CurrentPosition* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:PolicyConf.position)
}

// optional .ExposureScene exposure = 8;
inline bool PolicyConf::has_exposure() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PolicyConf::set_has_exposure() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PolicyConf::clear_has_exposure() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PolicyConf::clear_exposure() {
  if (exposure_ != NULL) exposure_->::ExposureScene::Clear();
  clear_has_exposure();
}
inline const ::ExposureScene& PolicyConf::exposure() const {
  // @@protoc_insertion_point(field_get:PolicyConf.exposure)
  return exposure_ != NULL ? *exposure_ : *default_instance_->exposure_;
}
inline ::ExposureScene* PolicyConf::mutable_exposure() {
  set_has_exposure();
  if (exposure_ == NULL) exposure_ = new ::ExposureScene;
  // @@protoc_insertion_point(field_mutable:PolicyConf.exposure)
  return exposure_;
}
inline ::ExposureScene* PolicyConf::release_exposure() {
  clear_has_exposure();
  ::ExposureScene* temp = exposure_;
  exposure_ = NULL;
  return temp;
}
inline void PolicyConf::set_allocated_exposure(::ExposureScene* exposure) {
  delete exposure_;
  exposure_ = exposure;
  if (exposure) {
    set_has_exposure();
  } else {
    clear_has_exposure();
  }
  // @@protoc_insertion_point(field_set_allocated:PolicyConf.exposure)
}

// repeated uint32 triggers = 9;
inline int PolicyConf::triggers_size() const {
  return triggers_.size();
}
inline void PolicyConf::clear_triggers() {
  triggers_.Clear();
}
inline ::google::protobuf::uint32 PolicyConf::triggers(int index) const {
  // @@protoc_insertion_point(field_get:PolicyConf.triggers)
  return triggers_.Get(index);
}
inline void PolicyConf::set_triggers(int index, ::google::protobuf::uint32 value) {
  triggers_.Set(index, value);
  // @@protoc_insertion_point(field_set:PolicyConf.triggers)
}
inline void PolicyConf::add_triggers(::google::protobuf::uint32 value) {
  triggers_.Add(value);
  // @@protoc_insertion_point(field_add:PolicyConf.triggers)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PolicyConf::triggers() const {
  // @@protoc_insertion_point(field_list:PolicyConf.triggers)
  return triggers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PolicyConf::mutable_triggers() {
  // @@protoc_insertion_point(field_mutable_list:PolicyConf.triggers)
  return &triggers_;
}

// repeated uint32 filters = 10;
inline int PolicyConf::filters_size() const {
  return filters_.size();
}
inline void PolicyConf::clear_filters() {
  filters_.Clear();
}
inline ::google::protobuf::uint32 PolicyConf::filters(int index) const {
  // @@protoc_insertion_point(field_get:PolicyConf.filters)
  return filters_.Get(index);
}
inline void PolicyConf::set_filters(int index, ::google::protobuf::uint32 value) {
  filters_.Set(index, value);
  // @@protoc_insertion_point(field_set:PolicyConf.filters)
}
inline void PolicyConf::add_filters(::google::protobuf::uint32 value) {
  filters_.Add(value);
  // @@protoc_insertion_point(field_add:PolicyConf.filters)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PolicyConf::filters() const {
  // @@protoc_insertion_point(field_list:PolicyConf.filters)
  return filters_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PolicyConf::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:PolicyConf.filters)
  return &filters_;
}

// repeated uint32 reranks = 11;
inline int PolicyConf::reranks_size() const {
  return reranks_.size();
}
inline void PolicyConf::clear_reranks() {
  reranks_.Clear();
}
inline ::google::protobuf::uint32 PolicyConf::reranks(int index) const {
  // @@protoc_insertion_point(field_get:PolicyConf.reranks)
  return reranks_.Get(index);
}
inline void PolicyConf::set_reranks(int index, ::google::protobuf::uint32 value) {
  reranks_.Set(index, value);
  // @@protoc_insertion_point(field_set:PolicyConf.reranks)
}
inline void PolicyConf::add_reranks(::google::protobuf::uint32 value) {
  reranks_.Add(value);
  // @@protoc_insertion_point(field_add:PolicyConf.reranks)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PolicyConf::reranks() const {
  // @@protoc_insertion_point(field_list:PolicyConf.reranks)
  return reranks_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PolicyConf::mutable_reranks() {
  // @@protoc_insertion_point(field_mutable_list:PolicyConf.reranks)
  return &reranks_;
}

// required bool flag = 12;
inline bool PolicyConf::has_flag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PolicyConf::set_has_flag() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PolicyConf::clear_has_flag() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PolicyConf::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool PolicyConf::flag() const {
  // @@protoc_insertion_point(field_get:PolicyConf.flag)
  return flag_;
}
inline void PolicyConf::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:PolicyConf.flag)
}

// repeated .TriggerConfExt triggersconf = 13;
inline int PolicyConf::triggersconf_size() const {
  return triggersconf_.size();
}
inline void PolicyConf::clear_triggersconf() {
  triggersconf_.Clear();
}
inline const ::TriggerConfExt& PolicyConf::triggersconf(int index) const {
  // @@protoc_insertion_point(field_get:PolicyConf.triggersconf)
  return triggersconf_.Get(index);
}
inline ::TriggerConfExt* PolicyConf::mutable_triggersconf(int index) {
  // @@protoc_insertion_point(field_mutable:PolicyConf.triggersconf)
  return triggersconf_.Mutable(index);
}
inline ::TriggerConfExt* PolicyConf::add_triggersconf() {
  // @@protoc_insertion_point(field_add:PolicyConf.triggersconf)
  return triggersconf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TriggerConfExt >&
PolicyConf::triggersconf() const {
  // @@protoc_insertion_point(field_list:PolicyConf.triggersconf)
  return triggersconf_;
}
inline ::google::protobuf::RepeatedPtrField< ::TriggerConfExt >*
PolicyConf::mutable_triggersconf() {
  // @@protoc_insertion_point(field_mutable_list:PolicyConf.triggersconf)
  return &triggersconf_;
}

// optional .RankConf rank = 15;
inline bool PolicyConf::has_rank() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PolicyConf::set_has_rank() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PolicyConf::clear_has_rank() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PolicyConf::clear_rank() {
  if (rank_ != NULL) rank_->::RankConf::Clear();
  clear_has_rank();
}
inline const ::RankConf& PolicyConf::rank() const {
  // @@protoc_insertion_point(field_get:PolicyConf.rank)
  return rank_ != NULL ? *rank_ : *default_instance_->rank_;
}
inline ::RankConf* PolicyConf::mutable_rank() {
  set_has_rank();
  if (rank_ == NULL) rank_ = new ::RankConf;
  // @@protoc_insertion_point(field_mutable:PolicyConf.rank)
  return rank_;
}
inline ::RankConf* PolicyConf::release_rank() {
  clear_has_rank();
  ::RankConf* temp = rank_;
  rank_ = NULL;
  return temp;
}
inline void PolicyConf::set_allocated_rank(::RankConf* rank) {
  delete rank_;
  rank_ = rank;
  if (rank) {
    set_has_rank();
  } else {
    clear_has_rank();
  }
  // @@protoc_insertion_point(field_set_allocated:PolicyConf.rank)
}

// optional bool for_new_user = 16;
inline bool PolicyConf::has_for_new_user() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PolicyConf::set_has_for_new_user() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PolicyConf::clear_has_for_new_user() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PolicyConf::clear_for_new_user() {
  for_new_user_ = false;
  clear_has_for_new_user();
}
inline bool PolicyConf::for_new_user() const {
  // @@protoc_insertion_point(field_get:PolicyConf.for_new_user)
  return for_new_user_;
}
inline void PolicyConf::set_for_new_user(bool value) {
  set_has_for_new_user();
  for_new_user_ = value;
  // @@protoc_insertion_point(field_set:PolicyConf.for_new_user)
}

// optional .RerankServiceConf rerank_srv = 17;
inline bool PolicyConf::has_rerank_srv() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PolicyConf::set_has_rerank_srv() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PolicyConf::clear_has_rerank_srv() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PolicyConf::clear_rerank_srv() {
  if (rerank_srv_ != NULL) rerank_srv_->::RerankServiceConf::Clear();
  clear_has_rerank_srv();
}
inline const ::RerankServiceConf& PolicyConf::rerank_srv() const {
  // @@protoc_insertion_point(field_get:PolicyConf.rerank_srv)
  return rerank_srv_ != NULL ? *rerank_srv_ : *default_instance_->rerank_srv_;
}
inline ::RerankServiceConf* PolicyConf::mutable_rerank_srv() {
  set_has_rerank_srv();
  if (rerank_srv_ == NULL) rerank_srv_ = new ::RerankServiceConf;
  // @@protoc_insertion_point(field_mutable:PolicyConf.rerank_srv)
  return rerank_srv_;
}
inline ::RerankServiceConf* PolicyConf::release_rerank_srv() {
  clear_has_rerank_srv();
  ::RerankServiceConf* temp = rerank_srv_;
  rerank_srv_ = NULL;
  return temp;
}
inline void PolicyConf::set_allocated_rerank_srv(::RerankServiceConf* rerank_srv) {
  delete rerank_srv_;
  rerank_srv_ = rerank_srv;
  if (rerank_srv) {
    set_has_rerank_srv();
  } else {
    clear_has_rerank_srv();
  }
  // @@protoc_insertion_point(field_set_allocated:PolicyConf.rerank_srv)
}

// repeated .Conf playconf = 18;
inline int PolicyConf::playconf_size() const {
  return playconf_.size();
}
inline void PolicyConf::clear_playconf() {
  playconf_.Clear();
}
inline const ::Conf& PolicyConf::playconf(int index) const {
  // @@protoc_insertion_point(field_get:PolicyConf.playconf)
  return playconf_.Get(index);
}
inline ::Conf* PolicyConf::mutable_playconf(int index) {
  // @@protoc_insertion_point(field_mutable:PolicyConf.playconf)
  return playconf_.Mutable(index);
}
inline ::Conf* PolicyConf::add_playconf() {
  // @@protoc_insertion_point(field_add:PolicyConf.playconf)
  return playconf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Conf >&
PolicyConf::playconf() const {
  // @@protoc_insertion_point(field_list:PolicyConf.playconf)
  return playconf_;
}
inline ::google::protobuf::RepeatedPtrField< ::Conf >*
PolicyConf::mutable_playconf() {
  // @@protoc_insertion_point(field_mutable_list:PolicyConf.playconf)
  return &playconf_;
}

// optional .ProfileConf profile = 19;
inline bool PolicyConf::has_profile() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PolicyConf::set_has_profile() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PolicyConf::clear_has_profile() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PolicyConf::clear_profile() {
  if (profile_ != NULL) profile_->::ProfileConf::Clear();
  clear_has_profile();
}
inline const ::ProfileConf& PolicyConf::profile() const {
  // @@protoc_insertion_point(field_get:PolicyConf.profile)
  return profile_ != NULL ? *profile_ : *default_instance_->profile_;
}
inline ::ProfileConf* PolicyConf::mutable_profile() {
  set_has_profile();
  if (profile_ == NULL) profile_ = new ::ProfileConf;
  // @@protoc_insertion_point(field_mutable:PolicyConf.profile)
  return profile_;
}
inline ::ProfileConf* PolicyConf::release_profile() {
  clear_has_profile();
  ::ProfileConf* temp = profile_;
  profile_ = NULL;
  return temp;
}
inline void PolicyConf::set_allocated_profile(::ProfileConf* profile) {
  delete profile_;
  profile_ = profile;
  if (profile) {
    set_has_profile();
  } else {
    clear_has_profile();
  }
  // @@protoc_insertion_point(field_set_allocated:PolicyConf.profile)
}

// -------------------------------------------------------------------

// PolicyConfs

// repeated .PolicyConf policys = 1;
inline int PolicyConfs::policys_size() const {
  return policys_.size();
}
inline void PolicyConfs::clear_policys() {
  policys_.Clear();
}
inline const ::PolicyConf& PolicyConfs::policys(int index) const {
  // @@protoc_insertion_point(field_get:PolicyConfs.policys)
  return policys_.Get(index);
}
inline ::PolicyConf* PolicyConfs::mutable_policys(int index) {
  // @@protoc_insertion_point(field_mutable:PolicyConfs.policys)
  return policys_.Mutable(index);
}
inline ::PolicyConf* PolicyConfs::add_policys() {
  // @@protoc_insertion_point(field_add:PolicyConfs.policys)
  return policys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PolicyConf >&
PolicyConfs::policys() const {
  // @@protoc_insertion_point(field_list:PolicyConfs.policys)
  return policys_;
}
inline ::google::protobuf::RepeatedPtrField< ::PolicyConf >*
PolicyConfs::mutable_policys() {
  // @@protoc_insertion_point(field_mutable_list:PolicyConfs.policys)
  return &policys_;
}

// required bool flag = 2;
inline bool PolicyConfs::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PolicyConfs::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PolicyConfs::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PolicyConfs::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool PolicyConfs::flag() const {
  // @@protoc_insertion_point(field_get:PolicyConfs.flag)
  return flag_;
}
inline void PolicyConfs::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:PolicyConfs.flag)
}

// -------------------------------------------------------------------

// WhiteListConf

// required uint32 id = 1;
inline bool WhiteListConf::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WhiteListConf::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WhiteListConf::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WhiteListConf::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 WhiteListConf::id() const {
  // @@protoc_insertion_point(field_get:WhiteListConf.id)
  return id_;
}
inline void WhiteListConf::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:WhiteListConf.id)
}

// required bytes name = 2;
inline bool WhiteListConf::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WhiteListConf::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WhiteListConf::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WhiteListConf::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WhiteListConf::name() const {
  // @@protoc_insertion_point(field_get:WhiteListConf.name)
  return *name_;
}
inline void WhiteListConf::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:WhiteListConf.name)
}
inline void WhiteListConf::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:WhiteListConf.name)
}
inline void WhiteListConf::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WhiteListConf.name)
}
inline ::std::string* WhiteListConf::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:WhiteListConf.name)
  return name_;
}
inline ::std::string* WhiteListConf::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WhiteListConf::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:WhiteListConf.name)
}

// required bytes wlfile_path = 3;
inline bool WhiteListConf::has_wlfile_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WhiteListConf::set_has_wlfile_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WhiteListConf::clear_has_wlfile_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WhiteListConf::clear_wlfile_path() {
  if (wlfile_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wlfile_path_->clear();
  }
  clear_has_wlfile_path();
}
inline const ::std::string& WhiteListConf::wlfile_path() const {
  // @@protoc_insertion_point(field_get:WhiteListConf.wlfile_path)
  return *wlfile_path_;
}
inline void WhiteListConf::set_wlfile_path(const ::std::string& value) {
  set_has_wlfile_path();
  if (wlfile_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wlfile_path_ = new ::std::string;
  }
  wlfile_path_->assign(value);
  // @@protoc_insertion_point(field_set:WhiteListConf.wlfile_path)
}
inline void WhiteListConf::set_wlfile_path(const char* value) {
  set_has_wlfile_path();
  if (wlfile_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wlfile_path_ = new ::std::string;
  }
  wlfile_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:WhiteListConf.wlfile_path)
}
inline void WhiteListConf::set_wlfile_path(const void* value, size_t size) {
  set_has_wlfile_path();
  if (wlfile_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wlfile_path_ = new ::std::string;
  }
  wlfile_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WhiteListConf.wlfile_path)
}
inline ::std::string* WhiteListConf::mutable_wlfile_path() {
  set_has_wlfile_path();
  if (wlfile_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wlfile_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:WhiteListConf.wlfile_path)
  return wlfile_path_;
}
inline ::std::string* WhiteListConf::release_wlfile_path() {
  clear_has_wlfile_path();
  if (wlfile_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wlfile_path_;
    wlfile_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WhiteListConf::set_allocated_wlfile_path(::std::string* wlfile_path) {
  if (wlfile_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wlfile_path_;
  }
  if (wlfile_path) {
    set_has_wlfile_path();
    wlfile_path_ = wlfile_path;
  } else {
    clear_has_wlfile_path();
    wlfile_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:WhiteListConf.wlfile_path)
}

// repeated uint32 policys = 4;
inline int WhiteListConf::policys_size() const {
  return policys_.size();
}
inline void WhiteListConf::clear_policys() {
  policys_.Clear();
}
inline ::google::protobuf::uint32 WhiteListConf::policys(int index) const {
  // @@protoc_insertion_point(field_get:WhiteListConf.policys)
  return policys_.Get(index);
}
inline void WhiteListConf::set_policys(int index, ::google::protobuf::uint32 value) {
  policys_.Set(index, value);
  // @@protoc_insertion_point(field_set:WhiteListConf.policys)
}
inline void WhiteListConf::add_policys(::google::protobuf::uint32 value) {
  policys_.Add(value);
  // @@protoc_insertion_point(field_add:WhiteListConf.policys)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
WhiteListConf::policys() const {
  // @@protoc_insertion_point(field_list:WhiteListConf.policys)
  return policys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
WhiteListConf::mutable_policys() {
  // @@protoc_insertion_point(field_mutable_list:WhiteListConf.policys)
  return &policys_;
}

// required bool flag = 5;
inline bool WhiteListConf::has_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WhiteListConf::set_has_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WhiteListConf::clear_has_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WhiteListConf::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool WhiteListConf::flag() const {
  // @@protoc_insertion_point(field_get:WhiteListConf.flag)
  return flag_;
}
inline void WhiteListConf::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:WhiteListConf.flag)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Proto_2fPolicy_2eproto__INCLUDED
